// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SalemoveSDK
import AVFoundation
import Alamofire
import Foundation
import Macaw
import Moya
import ReactiveSwift
import ReplayKit
@_exported import SalemoveSDK
import Security
import SocketIO
import Swift
import SwiftPhoenixClient
import TwilioVoice
import UserNotifications
import WebRTC
@objc public enum AttachmentType : Swift.Int {
  case files
  case singleChoice
  case singleChoiceResponse
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class EngagementFileData : ObjectiveC.NSObject {
  @objc final public let data: Foundation.Data
  @objc deinit
  @objc override dynamic public init()
}
extension Salemove {
  @objc final public func uploadFileToEngagement(_ file: SalemoveSDK.EngagementFile, progress: SalemoveSDK.EngagementFileProgressBlock?, completion: @escaping SalemoveSDK.EngagementFileCompletionBlock)
  @objc final public func fetchFile(engagementFile: SalemoveSDK.EngagementFile, progress: SalemoveSDK.EngagementFileProgressBlock?, completion: @escaping SalemoveSDK.EngagementFileFetchCompletionBlock)
}
@_hasMissingDesignatedInitializers @objc public class Attachment : ObjectiveC.NSObject {
  final public let type: SalemoveSDK.AttachmentType?
  final public let selectedOption: Swift.String?
  final public let options: [SalemoveSDK.SingleChoiceOption]?
  final public let imageUrl: Swift.String?
  final public let files: [SalemoveSDK.EngagementFile]?
  public init(file: SalemoveSDK.EngagementFile)
  public init(files: [SalemoveSDK.EngagementFile])
  @objc deinit
  @objc override dynamic public init()
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class SingleChoiceOption : ObjectiveC.NSObject, Swift.Codable {
  @objc public var text: Swift.String?
  @objc public var value: Swift.String?
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol PushNotificationConfigurable {
  func configurePushNotifications(_ notifications: [SalemoveSDK.PushNotificationType])
}
@objc public enum PushNotificationType : Swift.Int {
  case start
  case end
  case failed
  case message
  case transfer
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class QueueTicket : ObjectiveC.NSObject {
  @objc deinit
  @objc override dynamic public init()
}
@objc public protocol EngagementHandling {
  @objc func start()
  @objc func end()
  @objc var onEngagementRequest: SalemoveSDK.RequestOfferBlock { get }
  @objc var onEngagementTransfer: SalemoveSDK.EngagementTransferBlock { get }
}
@objc public protocol MessageHandling {
  @objc func receive(message: SalemoveSDK.Message)
  @objc var onOperatorTypingStatusUpdate: SalemoveSDK.OperatorTypingStatusUpdate { get }
  @objc var onMessagesUpdated: SalemoveSDK.MessagesUpdateBlock { get }
}
@objc public protocol MediaHandling {
  @objc var onMediaUpgradeOffer: SalemoveSDK.MediaUgradeOfferBlock { get }
  @objc var onScreenSharingOffer: SalemoveSDK.ScreenshareOfferBlock { get }
  @objc var onVideoStreamAdded: SalemoveSDK.VideoStreamAddedBlock { get }
  @objc var onAudioStreamAdded: SalemoveSDK.AudioStreamAddedBlock { get }
  @objc var onVisitorScreenSharingStateChange: SalemoveSDK.VisitorScreenSharingStateChange { get }
}
@objc public protocol ErrorHandling {
  @objc func fail(error: SalemoveSDK.SalemoveError)
}
@objc public protocol Interactable : SalemoveSDK.EngagementHandling, SalemoveSDK.ErrorHandling, SalemoveSDK.MediaHandling, SalemoveSDK.MessageHandling {
}
@_hasMissingDesignatedInitializers @objc public class Message : ObjectiveC.NSObject {
  @objc public var id: Swift.String {
    get
  }
  @objc public var content: Swift.String {
    get
  }
  @objc public var attachment: SalemoveSDK.Attachment? {
    get
  }
  public var sender: SalemoveSDK.MessageSender {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
public enum MessageSender {
  case visitor
  case `operator`
  case omniguide
  case system
  public static func == (a: SalemoveSDK.MessageSender, b: SalemoveSDK.MessageSender) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public typealias EngagementSessionBlock = (SalemoveSDK.EngagementRequest?, SalemoveSDK.SalemoveError?) -> Swift.Void
public typealias OperatorBlock = ([SalemoveSDK.Operator]?, SalemoveSDK.SalemoveError?) -> Swift.Void
public typealias QueueTicketBlock = (SalemoveSDK.QueueTicket?, SalemoveSDK.SalemoveError?) -> Swift.Void
public typealias QueueRequestBlock = ([SalemoveSDK.Queue]?, SalemoveSDK.SalemoveError?) -> Swift.Void
public typealias QueueUpdateBlock = (SalemoveSDK.Queue) -> Swift.Void
public typealias MessageBlock = (SalemoveSDK.Message?, SalemoveSDK.SalemoveError?) -> Swift.Void
public typealias EngagementBlock = (SalemoveSDK.Engagement?, SalemoveSDK.SalemoveError?) -> Swift.Void
public typealias SuccessBlock = (Swift.Bool, SalemoveSDK.SalemoveError?) -> Swift.Void
public typealias AnswerBlock = (Swift.Bool) -> Swift.Void
public typealias ErrorBlock = (SalemoveSDK.SalemoveError) -> Swift.Void
public typealias AnswerWithSuccessBlock = (Swift.Bool, SalemoveSDK.SuccessBlock?) -> Swift.Void
public typealias RequestAnswerBlock = (SalemoveSDK.VisitorContext, Swift.Bool, @escaping SalemoveSDK.SuccessBlock) -> Swift.Void
public typealias VisitorCodeBlock = (Swift.String?, SalemoveSDK.SalemoveError?) -> Swift.Void
public typealias RequestOfferBlock = (@escaping SalemoveSDK.RequestAnswerBlock) -> Swift.Void
public typealias MediaUgradeOfferBlock = (SalemoveSDK.MediaUpgradeOffer, @escaping SalemoveSDK.AnswerWithSuccessBlock) -> Swift.Void
public typealias ScreenshareOfferBlock = (@escaping SalemoveSDK.AnswerBlock) -> Swift.Void
public typealias VisitorScreenSharingStateChange = (SalemoveSDK.VisitorScreenSharingState, SalemoveSDK.SalemoveError?) -> Swift.Void
public typealias AudioStreamAddedBlock = (SalemoveSDK.AudioStreamable?, SalemoveSDK.SalemoveError?) -> Swift.Void
public typealias VideoStreamAddedBlock = (SalemoveSDK.VideoStreamable?, SalemoveSDK.SalemoveError?) -> Swift.Void
public typealias MessagesUpdateBlock = ([SalemoveSDK.Message]) -> Swift.Void
public typealias EngagementTransferBlock = ([SalemoveSDK.Operator]?) -> Swift.Void
public typealias PushActionBlock = (SalemoveSDK.Push) -> Swift.Void
public typealias OperatorTypingStatusUpdate = (SalemoveSDK.OperatorTypingStatus) -> Swift.Void
public typealias EngagementFileProgressBlock = (SalemoveSDK.EngagementFileProgress) -> Swift.Void
public typealias EngagementFileCompletionBlock = (SalemoveSDK.EngagementFileInformation?, SalemoveSDK.SalemoveError?) -> Swift.Void
public typealias EngagementFileFetchCompletionBlock = (SalemoveSDK.EngagementFileData?, SalemoveSDK.SalemoveError?) -> Swift.Void
@objc public protocol PushNotificationHandling {
  @objc func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification, withCompletionHandler completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
  @objc func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void)
}
extension MoyaProvider : ReactiveSwift.ReactiveExtensionsProvider {
}
@objc public protocol AudioStreamable {
  @objc @available(iOS, obsoleted: 10.0, message: "Audio is now played automatically when media is established")
  func playAudio()
  @objc func mute()
  @objc func unmute()
  @objc var isMuted: Swift.Bool { get }
  @objc var isRemote: Swift.Bool { get }
}
@objc public protocol VideoStreamable {
  @objc func getStreamView() -> SalemoveSDK.StreamView
  @objc func playVideo()
  @objc func pause()
  @objc func resume()
  @objc func stop()
  @objc var isPaused: Swift.Bool { get }
  @objc var isRemote: Swift.Bool { get }
}
@objc @_inheritsConvenienceInitializers public class SalemoveAppDelegate : ObjectiveC.NSObject, UIKit.UIApplicationDelegate {
  @discardableResult
  public func application(_ application: UIKit.UIApplication, didFinishLaunchingWithOptions launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]? = nil, enablePushNotifications isPushNotificationsEnabled: Swift.Bool = false) -> Swift.Bool
  @objc public func applicationDidBecomeActive(_ application: UIKit.UIApplication)
  @objc public func application(_ application: UIKit.UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Foundation.Data)
  @objc public func application(_ application: UIKit.UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Swift.Error)
  @objc deinit
  @objc override dynamic public init()
}
extension Salemove {
  @available(*, deprecated, message: "Use fetchFile(engagementFile:progress:completion:) instead")
  @objc final public func fetchFile(_ id: Swift.String, progress: SalemoveSDK.EngagementFileProgressBlock?, completion: @escaping SalemoveSDK.EngagementFileFetchCompletionBlock)
}
extension Salemove {
  @objc final public func waitForActiveEngagement(completion: @escaping SalemoveSDK.EngagementBlock)
  @objc final public func requestEngagementWith(selectedOperator: SalemoveSDK.Operator, visitorContext: SalemoveSDK.VisitorContext, completion: @escaping SalemoveSDK.EngagementSessionBlock)
  @objc final public func cancel(engagementRequest: SalemoveSDK.EngagementRequest, completion: @escaping SalemoveSDK.SuccessBlock)
  @objc final public func requestOperators(completion: @escaping SalemoveSDK.OperatorBlock)
  @objc final public func requestEngagedOperator(completion: @escaping SalemoveSDK.OperatorBlock)
  @objc final public func endEngagement(completion: @escaping SalemoveSDK.SuccessBlock)
}
extension Salemove : SalemoveSDK.PushNotificationHandling {
  @objc final public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification, withCompletionHandler completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
  @objc final public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void)
}
public enum ContextType : Swift.String {
  case page
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc public class VisitorContext : ObjectiveC.NSObject {
  public var type: SalemoveSDK.ContextType {
    get
  }
  public var url: Swift.String {
    get
  }
  public init(type: SalemoveSDK.ContextType, url: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
public enum MediaType : Swift.String, Swift.Codable {
  case audio
  case video
  case text
  case phone
  case unknown
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class EngagementFileProgress : ObjectiveC.NSObject {
  final public let fractionCompleted: Swift.Double
  @objc override dynamic public init()
  @objc deinit
}
extension Salemove {
  @objc final public func configure(site: Swift.String) throws
  @objc final public func configure(environment: Swift.String) throws
  @objc final public func configure(interactor: SalemoveSDK.Interactable)
  @objc final public func configure(appToken: Swift.String) throws
  @objc final public func configure(apiToken: Swift.String) throws
}
extension Salemove {
  @objc final public func requestVisitorCode(completion: @escaping SalemoveSDK.VisitorCodeBlock)
}
extension Salemove {
  @objc final public func updateInformation(name: Swift.String?, email: Swift.String?, phone: Swift.String?, externalID: Swift.String?, customAttributes: [Swift.String : Swift.String]?, completion: @escaping SalemoveSDK.SuccessBlock)
}
extension Salemove {
  @objc final public func clearSession()
}
extension Salemove {
  @objc final public func requestMediaUpgrade(offer: SalemoveSDK.MediaUpgradeOffer, completion: @escaping SalemoveSDK.SuccessBlock)
}
extension Salemove {
  @objc final public func send(selectedOptionValue: Swift.String, messageId: Swift.String, completion: @escaping SalemoveSDK.MessageBlock)
  @objc final public func send(message: Swift.String = "", attachment: SalemoveSDK.Attachment? = nil, completion: @escaping SalemoveSDK.MessageBlock)
  @objc final public func send(message: Swift.String, queueID: Swift.String, completion: @escaping SalemoveSDK.MessageBlock)
  @objc final public func sendMessagePreview(message: Swift.String, completion: @escaping SalemoveSDK.SuccessBlock)
}
@_hasMissingDesignatedInitializers @objc public class Push : ObjectiveC.NSObject, Swift.Codable {
  @objc public var actionIdentifier: Swift.String {
    get
  }
  @objc public var type: SalemoveSDK.PushType {
    get
  }
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
  @objc override dynamic public init()
}
@objc public enum PushType : Swift.Int {
  case unidentified
  case chatMessage
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class EngagementRequest : ObjectiveC.NSObject {
  @objc public var timeout: Swift.Int {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class EngagementFile : ObjectiveC.NSObject {
  @objc public var id: Swift.String? {
    get
  }
  public var size: Swift.Double? {
    get
  }
  @objc public var contentType: Swift.String? {
    get
  }
  public var isDeleted: Swift.Bool? {
    get
  }
  @objc final public let name: Swift.String
  @objc final public let url: Foundation.URL?
  @objc public init(name: Swift.String = "content", url: Foundation.URL)
  @objc public init(id: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class EngagementFileInformation : ObjectiveC.NSObject, Swift.Codable {
  final public let id: Swift.String
  final public let isSecurityScanningRequired: Swift.Bool
  final public let url: Swift.String?
  @objc deinit
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers @objc public class OperatorTypingStatus : ObjectiveC.NSObject {
  @objc public var isTyping: Swift.Bool {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum VideoScalingOptions : Swift.Int {
  case fill
  case aspectFit
  case aspectFill
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class StreamView : UIKit.UIView {
  @objc public var scale: SalemoveSDK.VideoScalingOptions {
    @objc get
    @objc set
  }
  @objc deinit
}
extension StreamView : WebRTC.RTCVideoViewDelegate {
  @objc dynamic public func videoView(_ videoView: WebRTC.RTCVideoRenderer, didChangeVideoSize size: CoreGraphics.CGSize)
}
@objc public enum LogLevel : Swift.Int {
  case none
  case error
  case warning
  case info
  case debug
  public static func >= (a: SalemoveSDK.LogLevel, b: SalemoveSDK.LogLevel) -> Swift.Bool
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class LocalScreen : ObjectiveC.NSObject {
  @objc public func stopSharing()
  @objc public func getStreamView() -> SalemoveSDK.StreamView
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc public class OperatorPicture : ObjectiveC.NSObject {
  @objc final public let url: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum GeneralError : Swift.Int, Swift.Error {
  case internalError
  case networkError
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public static var _nsErrorDomain: Swift.String {
    get
  }
}
@objc public enum ContextError : Swift.Int, Swift.Error {
  case invalidURL
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public static var _nsErrorDomain: Swift.String {
    get
  }
}
@objc public enum ConfigurationError : Swift.Int, Swift.Error {
  case invalidSite
  case invalidEnvironment
  case invalidAppToken
  case invalidApiToken
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public static var _nsErrorDomain: Swift.String {
    get
  }
}
@objc public enum MediaUpgradeError : Swift.Int, Swift.Error {
  case requestError
  case unsupportedRequest
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public static var _nsErrorDomain: Swift.String {
    get
  }
}
@objc public enum EngagementError : Swift.Int, Swift.Error {
  case operatorUnavailable
  case timeout
  case rejected
  case visitorCanceled
  case operatorCanceled
  case operatorLeft
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public static var _nsErrorDomain: Swift.String {
    get
  }
}
@objc public enum MediaError : Swift.Int, Swift.Error {
  case permissionDenied
  case screenSharingNotAvailable
  case notAvailableOnIOSVersion
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public static var _nsErrorDomain: Swift.String {
    get
  }
}
@objc public enum QueueError : Swift.Int, Swift.Error {
  case queueClosed
  case queueFull
  case invalidId
  case alreadyEnqueued
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public static var _nsErrorDomain: Swift.String {
    get
  }
}
@objc public enum FileError : Swift.Int, Swift.Error {
  case infected
  case unsupportedFileType
  case fileTooBig
  case invalidFileURL
  case fileUnavailable
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public static var _nsErrorDomain: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class SalemoveError : ObjectiveC.NSObject {
  @objc public var reason: Swift.String {
    get
  }
  @objc public var error: Swift.Error? {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class Queue : ObjectiveC.NSObject {
  @objc public var id: Swift.String {
    get
  }
  @objc public var name: Swift.String {
    get
  }
  @objc public var state: SalemoveSDK.QueueState {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class QueueState : ObjectiveC.NSObject {
  public var status: SalemoveSDK.QueueStatus {
    get
  }
  public var media: [SalemoveSDK.MediaType] {
    get
  }
  @objc deinit
  @objc override dynamic public init()
}
public enum QueueStatus : Swift.String, Swift.Codable {
  case open
  case closed
  case full
  case unstaffed
  case unknown
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class Salemove : ObjectiveC.NSObject {
  @objc public static let sharedInstance: SalemoveSDK.Salemove
  @objc weak final public var currentInteractor: SalemoveSDK.Interactable?
  @objc final public var pushHandler: SalemoveSDK.PushActionBlock? {
    @objc get
    @objc set
  }
  @objc final public var environment: Swift.String {
    @objc get
  }
  @objc final public var site: Swift.String {
    @objc get
  }
  @objc final public var appToken: Swift.String {
    @objc get
  }
  @objc final public var apiToken: Swift.String {
    @objc get
  }
  @objc deinit
}
extension Salemove {
  @objc final public func configureLogLevel(level: SalemoveSDK.LogLevel)
}
extension Salemove : SalemoveSDK.PushNotificationConfigurable {
  final public func configurePushNotifications(_ notifications: [SalemoveSDK.PushNotificationType])
}
@_hasMissingDesignatedInitializers @objc public class Operator : ObjectiveC.NSObject {
  @objc public var name: Swift.String {
    get
  }
  @objc public var picture: SalemoveSDK.OperatorPicture? {
    get
  }
  public var availableMedia: [SalemoveSDK.MediaType]? {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
public typealias InternalOperatorTypingStatusUpdate = (SalemoveSDK.OperatorTypingStatus) -> Swift.Void
extension Salemove {
  @objc final public func queueForEngagement(queueID: Swift.String, visitorContext: SalemoveSDK.VisitorContext, shouldCloseAllQueues: Swift.Bool = true, completion: @escaping SalemoveSDK.QueueTicketBlock)
  @objc final public func dequeueFromActiveTickets(completion: @escaping SalemoveSDK.SuccessBlock)
  @objc final public func cancel(queueTicket: SalemoveSDK.QueueTicket, completion: @escaping SalemoveSDK.SuccessBlock)
  @objc final public func listQueues(completion: @escaping SalemoveSDK.QueueRequestBlock)
  @objc final public func subscribeForUpdates(forQueue queueIds: [Swift.String], onError: @escaping SalemoveSDK.ErrorBlock, onUpdate: @escaping SalemoveSDK.QueueUpdateBlock) -> Swift.String?
  @objc final public func unsubscribeFromUpdates(queueCallbackId: Swift.String, onError: @escaping SalemoveSDK.ErrorBlock)
}
@objc public enum ScreenSharingStatus : Swift.Int {
  case sharing
  case notSharing
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class VisitorScreenSharingState : ObjectiveC.NSObject {
  @objc public var status: SalemoveSDK.ScreenSharingStatus {
    get
  }
  @objc public var localScreen: SalemoveSDK.LocalScreen? {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class Engagement : ObjectiveC.NSObject {
  @objc final public let id: Swift.String
  @objc final public let engagedOperator: SalemoveSDK.Operator?
  @objc override dynamic public init()
  @objc deinit
}
@objc public class MediaUpgradeOffer : ObjectiveC.NSObject {
  final public let type: SalemoveSDK.MediaType
  final public let direction: SalemoveSDK.MediaDirection
  public init(type: SalemoveSDK.MediaType, direction: SalemoveSDK.MediaDirection) throws
  @objc override dynamic public init()
  @objc deinit
}
public enum MediaDirection : Swift.String {
  case oneWay
  case twoWay
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension SalemoveSDK.AttachmentType : Swift.Equatable {}
extension SalemoveSDK.AttachmentType : Swift.Hashable {}
extension SalemoveSDK.AttachmentType : Swift.RawRepresentable {}
extension SalemoveSDK.PushNotificationType : Swift.Equatable {}
extension SalemoveSDK.PushNotificationType : Swift.Hashable {}
extension SalemoveSDK.PushNotificationType : Swift.RawRepresentable {}
extension SalemoveSDK.MessageSender : Swift.Equatable {}
extension SalemoveSDK.MessageSender : Swift.Hashable {}
extension SalemoveSDK.ContextType : Swift.Equatable {}
extension SalemoveSDK.ContextType : Swift.Hashable {}
extension SalemoveSDK.ContextType : Swift.RawRepresentable {}
extension SalemoveSDK.MediaType : Swift.Equatable {}
extension SalemoveSDK.MediaType : Swift.Hashable {}
extension SalemoveSDK.MediaType : Swift.RawRepresentable {}
extension SalemoveSDK.PushType : Swift.Equatable {}
extension SalemoveSDK.PushType : Swift.Hashable {}
extension SalemoveSDK.PushType : Swift.RawRepresentable {}
extension SalemoveSDK.VideoScalingOptions : Swift.Equatable {}
extension SalemoveSDK.VideoScalingOptions : Swift.Hashable {}
extension SalemoveSDK.VideoScalingOptions : Swift.RawRepresentable {}
extension SalemoveSDK.LogLevel : Swift.Equatable {}
extension SalemoveSDK.LogLevel : Swift.Hashable {}
extension SalemoveSDK.LogLevel : Swift.RawRepresentable {}
extension SalemoveSDK.GeneralError : Swift.Equatable {}
extension SalemoveSDK.GeneralError : Swift.Hashable {}
extension SalemoveSDK.GeneralError : Swift.RawRepresentable {}
extension SalemoveSDK.ContextError : Swift.Equatable {}
extension SalemoveSDK.ContextError : Swift.Hashable {}
extension SalemoveSDK.ContextError : Swift.RawRepresentable {}
extension SalemoveSDK.ConfigurationError : Swift.Equatable {}
extension SalemoveSDK.ConfigurationError : Swift.Hashable {}
extension SalemoveSDK.ConfigurationError : Swift.RawRepresentable {}
extension SalemoveSDK.MediaUpgradeError : Swift.Equatable {}
extension SalemoveSDK.MediaUpgradeError : Swift.Hashable {}
extension SalemoveSDK.MediaUpgradeError : Swift.RawRepresentable {}
extension SalemoveSDK.EngagementError : Swift.Equatable {}
extension SalemoveSDK.EngagementError : Swift.Hashable {}
extension SalemoveSDK.EngagementError : Swift.RawRepresentable {}
extension SalemoveSDK.MediaError : Swift.Equatable {}
extension SalemoveSDK.MediaError : Swift.Hashable {}
extension SalemoveSDK.MediaError : Swift.RawRepresentable {}
extension SalemoveSDK.QueueError : Swift.Equatable {}
extension SalemoveSDK.QueueError : Swift.Hashable {}
extension SalemoveSDK.QueueError : Swift.RawRepresentable {}
extension SalemoveSDK.FileError : Swift.Equatable {}
extension SalemoveSDK.FileError : Swift.Hashable {}
extension SalemoveSDK.FileError : Swift.RawRepresentable {}
extension SalemoveSDK.QueueStatus : Swift.Equatable {}
extension SalemoveSDK.QueueStatus : Swift.Hashable {}
extension SalemoveSDK.QueueStatus : Swift.RawRepresentable {}
extension SalemoveSDK.ScreenSharingStatus : Swift.Equatable {}
extension SalemoveSDK.ScreenSharingStatus : Swift.Hashable {}
extension SalemoveSDK.ScreenSharingStatus : Swift.RawRepresentable {}
extension SalemoveSDK.MediaDirection : Swift.Equatable {}
extension SalemoveSDK.MediaDirection : Swift.Hashable {}
extension SalemoveSDK.MediaDirection : Swift.RawRepresentable {}
