#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef SALEMOVESDK_SWIFT_H
#define SALEMOVESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import UserNotifications;
@import WebRTC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SalemoveSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Attachment included in a <code>Message</code>.
SWIFT_CLASS("_TtC11SalemoveSDK10Attachment")
@interface Attachment : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The type of the attachment.
typedef SWIFT_ENUM(NSInteger, AttachmentType, open) {
/// Attachment has files.
  AttachmentTypeFiles = 0,
/// Attachment has a single choice questionnaire.
  AttachmentTypeSingleChoice = 1,
/// Attachment has the response to a single choice questionnaire.
  AttachmentTypeSingleChoiceResponse = 2,
};


/// Audio stream, that can be used to control operator and visitor audio during an engagement
SWIFT_PROTOCOL("_TtP11SalemoveSDK15AudioStreamable_")
@protocol AudioStreamable
/// Play the incoming/outgoing audio stream
- (void)playAudio SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="Audio is now played automatically when media is established");
/// Mute the outgoing audio stream
- (void)mute;
/// Unmute the outgoing audio stream
- (void)unmute;
/// State of the audio stream
///
/// returns:
/// bool indicating if the stream is muted or not
@property (nonatomic, readonly) BOOL isMuted;
/// Source of the audio stream
///
/// returns:
/// bool indicating if the stream is local or remote
@property (nonatomic, readonly) BOOL isRemote;
/// Handler used to detect if Visitor stream is put on hold or resumed from being put on hold by Operator
@property (nonatomic, copy) void (^ _Nullable onHold)(BOOL);
@end


/// Error of the configuration of the sdk
typedef SWIFT_ENUM(NSInteger, ConfigurationError, open) {
/// The site ID is invalid.
  ConfigurationErrorInvalidSite = 0,
/// The environemnt is invalid.
  ConfigurationErrorInvalidEnvironment = 1,
/// The app token is invalid.
  ConfigurationErrorInvalidAppToken = 2,
/// The api token is invalid.
  ConfigurationErrorInvalidApiToken = 3,
/// The api token is not supported.
  ConfigurationErrorApiTokenNotSupported = 4,
/// The site Api key is invalid.
  ConfigurationErrorInvalidSiteApiKey = 5,
/// The region custom endpoint is invalid.
  ConfigurationErrorInvalidRegionEndpoint = 6,
};
static NSString * _Nonnull const ConfigurationErrorDomain = @"SalemoveSDK.ConfigurationError";

/// Deprecated.
typedef SWIFT_ENUM(NSInteger, ContextError, open) {
/// The context URL is invalid.
  ContextErrorInvalidURL = 0,
};
static NSString * _Nonnull const ContextErrorDomain = @"SalemoveSDK.ContextError";


@class NSString;
@class Operator;

/// Representation of an engagement in Glia.
SWIFT_CLASS("_TtC11SalemoveSDK10Engagement")
@interface Engagement : NSObject
/// The ID of the engagement.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The operator that is currently engaged with the visitor.
@property (nonatomic, readonly, strong) Operator * _Nullable engagedOperator;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Error of the Engagement
typedef SWIFT_ENUM(NSInteger, EngagementError, open) {
/// The Operator is unavailable for an Engagement.
  EngagementErrorOperatorUnavailable = 0,
/// Engagement request timeout.
  EngagementErrorTimeout = 1,
/// Engagement request rejected by the Operator.
  EngagementErrorRejected = 2,
/// Engagment request cancelled by the Visitor.
  EngagementErrorVisitorCanceled = 3,
/// Engagmenet request cancelled by Operator.
  EngagementErrorOperatorCanceled = 4,
/// Engagmenet request aborted by Operator leaving.
  EngagementErrorOperatorLeft = 5,
};
static NSString * _Nonnull const EngagementErrorDomain = @"SalemoveSDK.EngagementError";

@class NSURL;

/// A file that is part of an engagement.
SWIFT_CLASS("_TtC11SalemoveSDK14EngagementFile")
@interface EngagementFile : NSObject
/// ID of the file. Used only when receiving a message.
@property (nonatomic, readonly, copy) NSString * _Nullable id;
/// File mimetype, for example <code>application/pdf</code>. Used only when receiving a message.
@property (nonatomic, readonly, copy) NSString * _Nullable contentType;
/// Name of the file.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The URL of the file. When downloading, it is the endpoint to be used to retrieve the file,
/// and is nil if <code>isDeleted</code> is true. When uploading, it is the URL of the file in the device.
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
/// Creates an object with information for uploading a file to Glia’s servers.
/// \param name The HTTP body parameter to which the file should be assigned. This value is <code>"content"</code> by default.
///
/// \param url The file’s URL in the device’s internal memory.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name url:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
/// Creates an object with information for uploading a file to Glia’s servers.
/// \param id The ID of a file.
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSData;

/// The information about files shared or uploaded during an engagement.
SWIFT_CLASS("_TtC11SalemoveSDK18EngagementFileData")
@interface EngagementFileData : NSObject
/// The data of the file.
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The information of a file uploaded during an engagement.
SWIFT_CLASS("_TtC11SalemoveSDK25EngagementFileInformation")
@interface EngagementFileInformation : NSObject
@end


/// The progress of a file upload during the engagement.
SWIFT_CLASS("_TtC11SalemoveSDK22EngagementFileProgress")
@interface EngagementFileProgress : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Engagement request sent to an Operator
SWIFT_CLASS("_TtC11SalemoveSDK17EngagementRequest")
@interface EngagementRequest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SalemoveError;

/// Basic protocol for selecting an Operator
SWIFT_PROTOCOL("_TtP11SalemoveSDK13ErrorHandling_")
@protocol ErrorHandling
/// Called when there is a failure in the client library or in the Engagement flow
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code> - in the case when there is an internal error
///   </li>
///   <li>
///     <code>EngagementError.timeout</code> - in the case when an Engagement request was not accepted in time by the Operator
///   </li>
///   <li>
///     <code>EngagementError.rejected</code> - in the case when an Engagement request was rejected by the Operator
///   </li>
///   <li>
///     <code>EngagementError.visitorCanceled</code> - in the case when the Visitor cancels an Engagement request
///   </li>
///   <li>
///     <code>EngagementError.operatorCanceled</code> - in the case when Operator cancels an Engagement request
///   </li>
///   <li>
///     <code>EngagementError.operatorLeft</code> - in the case when Operator leaves an active Engagement
///   </li>
/// </ul>
/// \param error the <code>SalemoveError</code>
///
- (void)failWithError:(SalemoveError * _Nonnull)error;
@end

/// Error related to files.
typedef SWIFT_ENUM(NSInteger, FileError, open) {
/// A file uploaded to Glia’s servers has been identified as infected by our security check.
  FileErrorInfected = 0,
/// The file type is unsupported by Glia.
  FileErrorUnsupportedFileType = 1,
/// The file is too big to be uploaded.
  FileErrorFileTooBig = 2,
/// The provided file URL is invalid.
  FileErrorInvalidFileURL = 3,
/// The file is unavailable. For example, the file might have been deleted.
  FileErrorFileUnavailable = 4,
/// File uploading disabled. For example, the file uploading might have been disabled from the operator side.
  FileErrorForbidden = 5,
};
static NSString * _Nonnull const FileErrorDomain = @"SalemoveSDK.FileError";

/// General error of the client library
typedef SWIFT_ENUM(NSInteger, GeneralError, open) {
/// Internal error
  GeneralErrorInternalError = 0,
/// Networking error
  GeneralErrorNetworkError = 1,
};
static NSString * _Nonnull const GeneralErrorDomain = @"SalemoveSDK.GeneralError";

@class StreamView;

/// LocalScreen provides an ability to stop a screen shared by a Visitor during an Engagement.
SWIFT_CLASS("_TtC11SalemoveSDK11LocalScreen")
@interface LocalScreen : NSObject
/// Stop sharing Visitor screen with Operator
- (void)stopSharing;
/// Access the stream view
///
/// returns:
/// ‘StreamView’ that contains the the screen stream
- (StreamView * _Nonnull)getStreamView SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Available log levels. This can be configured by <code>Salemove.sharedIsntance.configureLogLevel(level: LogLevel)</code>
typedef SWIFT_ENUM(NSInteger, LogLevel, open) {
/// The SDK will not produce any logs
  LogLevelNone = 0,
/// Prints: error
  LogLevelError = 1,
/// Prints: warning, error
  LogLevelWarning = 2,
/// Prints: info, warning, error
  LogLevelInfo = 3,
/// Prints all the logs
  LogLevelDebug = 4,
};

/// Error of the media
typedef SWIFT_ENUM(NSInteger, MediaError, open) {
/// When the user has explicitly denied the permission to work with the media
  MediaErrorPermissionDenied = 0,
/// When there is an active screensharing session but does not allow screensharing to start
  MediaErrorScreenSharingNotAvailable = 1,
/// When the Visitor is using an older iOS version that 11.0
  MediaErrorNotAvailableOnIOSVersion = 2,
/// The SDK does not support the specified engagement type.
  MediaErrorUnsupportedEngagementType = 3,
};
static NSString * _Nonnull const MediaErrorDomain = @"SalemoveSDK.MediaError";

/// Error of the media upgrade request
typedef SWIFT_ENUM(NSInteger, MediaUpgradeError, open) {
/// Upgrade to requested media failed.
  MediaUpgradeErrorRequestError = 0,
/// Received unexpected arguments or unexpected response from server.
  MediaUpgradeErrorUnsupportedRequest = 1,
};
static NSString * _Nonnull const MediaUpgradeErrorDomain = @"SalemoveSDK.MediaUpgradeError";


/// MediaUpgradeOffer object sent by the client library
SWIFT_CLASS("_TtC11SalemoveSDK17MediaUpgradeOffer")
@interface MediaUpgradeOffer : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Chat message sent by an Operator or a Visitor
SWIFT_CLASS("_TtC11SalemoveSDK7Message")
@interface Message : NSObject
/// Identifier of the message. This identifier can be used to track a single message.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Content of the message
@property (nonatomic, readonly, copy) NSString * _Nonnull content;
/// Attachment
@property (nonatomic, readonly, strong) Attachment * _Nullable attachment;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class OperatorTypingStatus;

/// Basic protocol for handling chat incoming messages
SWIFT_PROTOCOL("_TtP11SalemoveSDK15MessageHandling_")
@protocol MessageHandling
/// Receiving a message from an Operator, or a Visitor in the case the message was successfully delivered
/// after sending it using <code>Salemove.send(message:)</code>.
/// \param message Instance of <code>Message</code>
///
- (void)receiveWithMessage:(Message * _Nonnull)message;
/// Receiving an <code>OperatorTypingStatusUpdate</code> when the Operator starts or stops writing a chat message
@property (nonatomic, readonly, copy) void (^ _Nonnull onOperatorTypingStatusUpdate)(OperatorTypingStatus * _Nonnull);
/// Handling the incoming messages updates that happens when
/// the client library fetches new information on ‘UIApplicationDidBecomeActive’
@property (nonatomic, readonly, copy) void (^ _Nonnull onMessagesUpdated)(NSArray<Message *> * _Nonnull);
@end


@class OperatorPicture;

/// An Operator for an Engagement
SWIFT_CLASS("_TtC11SalemoveSDK8Operator")
@interface Operator : NSObject
/// Operator name.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Operator picture, see OperatorPicture class for more details.
@property (nonatomic, readonly, strong) OperatorPicture * _Nullable picture;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// <ul>
///   <li>
///     Operator picture information
///   </li>
/// </ul>
SWIFT_CLASS("_TtC11SalemoveSDK15OperatorPicture")
@interface OperatorPicture : NSObject
/// <ul>
///   <li>
///     Returns The Operator picture URL if exists
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSString * _Nullable url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Operator typing status
SWIFT_CLASS("_TtC11SalemoveSDK20OperatorTypingStatus")
@interface OperatorTypingStatus : NSObject
/// True if the Operator has written or is writing a message but has not sent it yet, false otherwise.
@property (nonatomic, readonly) BOOL isTyping;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum PushType : NSInteger;

/// Push object sent by the client library
SWIFT_CLASS("_TtC11SalemoveSDK4Push")
@interface Push : NSObject
/// UNNotificationResponse.actionIdentifier that is returned by the system
@property (nonatomic, readonly, copy) NSString * _Nonnull actionIdentifier;
/// Push type. One of <code>PushType</code> values.
@property (nonatomic, readonly) enum PushType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11SalemoveSDK17PushNotifications")
@interface PushNotifications : NSObject
/// The current handler that the SDK is forwarding the UNNotificationResponse.actionIdentifier to.
@property (nonatomic, copy) void (^ _Nullable handler)(Push * _Nonnull);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





@class UIApplication;
@class UNUserNotificationCenter;
@class UNNotification;
@class UNNotificationResponse;

@interface PushNotifications (SWIFT_EXTENSION(SalemoveSDK)) <UNUserNotificationCenterDelegate>
/// See <a href="x-source-tag://PushNotificationsHandlingDidRegister">PushNotificationsHandling</a> for more information.
- (void)application:(UIApplication * _Nonnull)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
/// See <a href="x-source-tag://PushNotificationsHandlingDidFailToRegister">PushNotificationsHandling</a> for more information.
- (void)application:(UIApplication * _Nonnull)application didFailToRegisterForRemoteNotificationsWithError:(NSError * _Nonnull)error;
/// See <a href="x-source-tag://PushNotificationsHandlingWillPresent">PushNotificationsHandling</a> for more information.
- (void)userNotificationCenter:(UNUserNotificationCenter * _Nonnull)center willPresentNotification:(UNNotification * _Nonnull)notification withCompletionHandler:(void (^ _Nonnull)(UNNotificationPresentationOptions))completionHandler;
/// See <a href="x-source-tag://PushNotificationsHandlingDidReceive">PushNotificationsHandling</a> for more information.
- (void)userNotificationCenter:(UNUserNotificationCenter * _Nonnull)center didReceiveNotificationResponse:(UNNotificationResponse * _Nonnull)response withCompletionHandler:(void (^ _Nonnull)(void))completionHandler;
@end

/// Available push notification types
typedef SWIFT_ENUM(NSInteger, PushType, open) {
/// Unknown type
  PushTypeUnidentified = 0,
/// Chat type
  PushTypeChatMessage = 1,
};

@class QueueState;

/// A queue for an Engagement
SWIFT_CLASS("_TtC11SalemoveSDK5Queue")
@interface Queue : NSObject
/// Queue identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Queue name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Queue state
@property (nonatomic, readonly, strong) QueueState * _Nonnull state;
/// Indicates that queue is the default. true if Queue is default
@property (nonatomic, readonly) BOOL isDefault;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Error of the Queue
typedef SWIFT_ENUM(NSInteger, QueueError, open) {
/// The Queue is closed for an Engagement.
  QueueErrorQueueClosed = 0,
/// The Queue is full.
  QueueErrorQueueFull = 1,
/// The Queue ID is invalid.
  QueueErrorInvalidId = 2,
/// The visitor is already enqueued.
  QueueErrorAlreadyEnqueued = 3,
};
static NSString * _Nonnull const QueueErrorDomain = @"SalemoveSDK.QueueError";


SWIFT_CLASS("_TtC11SalemoveSDK10QueueState")
@interface QueueState : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A token for Visitor’s spot in the queue. This ticket can also be used to cancel queueing
SWIFT_CLASS("_TtC11SalemoveSDK11QueueTicket")
@interface QueueTicket : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Shared instance that can be accessed across all the application
SWIFT_CLASS("_TtC11SalemoveSDK8Salemove")
@interface Salemove : NSObject
/// Use this to access the client library, avoid creating the instance manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Salemove * _Nonnull sharedInstance;)
+ (Salemove * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// The current selected environment
@property (nonatomic, readonly, copy) NSString * _Nonnull environment;
/// The current selected site
@property (nonatomic, readonly, copy) NSString * _Nonnull site;
/// The current provided app token
@property (nonatomic, readonly, copy) NSString * _Nonnull appToken;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end










@interface Salemove (SWIFT_EXTENSION(SalemoveSDK))
/// Request media upgrade with specific offer
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
///   <li>
///     <code>MediaUpgradeError.requestError</code>
///   </li>
/// </ul>
/// \param offer The `MediaUpgradeOffer’ that is used for the request
///
/// \param completion A callback that returns the upgrade result or <code>SalemoveError</code>
///
- (void)requestMediaUpgradeWithOffer:(MediaUpgradeOffer * _Nonnull)offer completion:(void (^ _Nonnull)(BOOL, SalemoveError * _Nullable))completion;
@end


@interface Salemove (SWIFT_EXTENSION(SalemoveSDK))
/// Request a VisitorCode for current Visitor
/// A Visitor code can be displayed to the Visitor. The Visitor can then inform OmniBrowse Operators of their code.
/// OmniBrowse Operators use the Visitor’s code to start an OmniBrowse Engagement with the Visitor.
/// Each Visitor code is generated on demand and is unique for every Visitor on a particular site. Upon the first time
/// this function is called for a Visitor the code is generated and returned. For each successive call thereafter the
/// same code will be returned as long as the code has not expired. The expiration time for Visitor codes is 3 hours.
/// During that time the code can be used to initiate an engagement. Once Operator uses the Visitor code to initiate
/// an engagement, the code will expire immediately. When the Visitor Code expires this function will return a new
/// Visitor code.
/// The expiration time is important to take note of if you plan on retrieving the code only once during the Visitor’s
/// session. A new code should be requested once the initial one has expired. When Visitor provides an expired code
/// to Operator the Operator will not be able to connect with the Visitor.
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
/// </ul>
/// \param completion A callback that will return the visitor code or <code>SalemoveError</code>
///
- (void)requestVisitorCodeWithCompletion:(void (^ _Nonnull)(NSString * _Nullable, SalemoveError * _Nullable))completion;
@end






@interface Salemove (SWIFT_EXTENSION(SalemoveSDK))
/// Clear the use session of the client library
- (void)clearSession;
@end


@interface Salemove (SWIFT_EXTENSION(SalemoveSDK))
/// Configure log level
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     level: One of the ‘LogLevel’ values that the logger should use
///   </li>
/// </ul>
- (void)configureLogLevelWithLevel:(enum LogLevel)level;
@end


@interface Salemove (SWIFT_EXTENSION(SalemoveSDK))
/// Uploads a file to an engagement. The uploaded file can be later sent as part of a chat message attachments.
/// If Glia’s servers require a security check for the uploaded file, then it will be triggered automatically. The completion
/// will be called with the file information once the check succeeds and reports that the file is clean. If the security
/// check fails, then the completion will be called with <code>FileError.infected</code>. In case the security scan is not
/// needed, the completion will be called right after the file upload is completed.
/// The error inside the completion may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
///   <li>
///     <code>FileError.infected</code>
///   </li>
///   <li>
///     <code>FileError.unsupportedFileType</code>
///   </li>
///   <li>
///     <code>FileError.fileTooBig</code>
///   </li>
/// </ul>
/// \param file The file that will be uploaded.
///
/// \param progress A callback that reports the upload progress of the file.
///
/// \param completion A callback that will return <code>EngagementFileInformation</code> at the end of successful upload and security scan (if needed), or <code>SalemoveError</code>.
///
- (void)uploadFileToEngagement:(EngagementFile * _Nonnull)file progress:(void (^ _Nullable)(EngagementFileProgress * _Nonnull))progress completion:(void (^ _Nonnull)(EngagementFileInformation * _Nullable, SalemoveError * _Nullable))completion;
/// Retrieves a file from Glia’s servers.
/// The error inside the completion may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
/// </ul>
/// \param engagementFile A instance of EngagementFile.
///
/// \param progress A callback that reports the upload progress of the file.
///
/// \param completion A callback that will return an <code>EngagementFileData</code> object if successful, or <code>InternalError</code>.
///
- (void)fetchFileWithEngagementFile:(EngagementFile * _Nonnull)engagementFile progress:(void (^ _Nullable)(EngagementFileProgress * _Nonnull))progress completion:(void (^ _Nonnull)(EngagementFileData * _Nullable, SalemoveError * _Nullable))completion;
@end





@interface Salemove (SWIFT_EXTENSION(SalemoveSDK))
/// Send a chat message.
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
/// </ul>
/// \param message The content of the message that should be sent to the operator.
///
/// \param attachment An optional attachment to be sent to the operator. It is <code>nil</code> by default.
///
/// \param completion A callback that will return the <code>Message</code> or <code>SalemoveError</code>.
///
- (void)sendWithMessage:(NSString * _Nonnull)message attachment:(Attachment * _Nullable)attachment completion:(void (^ _Nonnull)(Message * _Nullable, SalemoveError * _Nullable))completion;
/// Send a chat message.
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
/// </ul>
/// \param message A content of the message that should be queued.
///
/// \param queueID The ID of the queue to which the message is sent.
///
/// \param completion A callback that will return the <code>Message</code> or <code>SalemoveError</code>.
///
- (void)sendWithMessage:(NSString * _Nonnull)message queueID:(NSString * _Nonnull)queueID completion:(void (^ _Nonnull)(Message * _Nullable, SalemoveError * _Nullable))completion;
/// Send a message preview to the Operator.
/// The latest preview message will always be visible to the Operator. This means that Operators can use the
/// preview messages as an indication of Visitor activity. The Operator could also use the preview messages to
/// start preparing a response before the Visitor finishes typing, ensuring a fast and seamless communication
/// experience.
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
/// </ul>
/// \param message The content of the message preview.
///
/// \param completion A callback that will return the sending result or <code>SalemoveError</code>.
///
- (void)sendMessagePreviewWithMessage:(NSString * _Nonnull)message completion:(void (^ _Nonnull)(BOOL, SalemoveError * _Nullable))completion;
@end



@interface Salemove (SWIFT_EXTENSION(SalemoveSDK))
/// Waits until there is an active engagement handled by the SDK.
/// If the SDK already has an active engagement present, then it returns information about it through
/// the <code>completion</code> block. Otherwise, it waits until the SDK receives information about an active engagement.
/// This method is useful to decide if touching on a push notification after the app has been force closed should open
/// an engagement screen. If there is an engagement restored by the SDK, then this method will notify soon after the
/// SDK is initialized, and you can show an engagement screen. Otherwise, then you should do nothing about the push
/// notification.
/// \param completion The closure that will be called once the SDK detects an active engagement.
///
- (void)waitForActiveEngagementWithCompletion:(void (^ _Nonnull)(Engagement * _Nullable, SalemoveError * _Nullable))completion;
/// Cancel an ongoing EngagementRequest
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     engagementRequest: The ongoing EngagementRequest to be canceled
///   </li>
///   <li>
///     completion: A callback that will return the canceling result or <code>SalemoveError</code>
///   </li>
/// </ul>
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
/// </ul>
- (void)cancelWithEngagementRequest:(EngagementRequest * _Nonnull)engagementRequest completion:(void (^ _Nonnull)(BOOL, SalemoveError * _Nullable))completion;
/// Requests information of the Operator(s) that are currently engaged with the Visitor
/// <ul>
///   <li>
///     parameter:
///   </li>
///   <li>
///     completion: A callback that will return a list of all ‘Operator’s in engagement  or <code>SalemoveError</code>
///   </li>
/// </ul>
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
/// </ul>
- (void)requestEngagedOperatorWithCompletion:(void (^ _Nonnull)(NSArray<Operator *> * _Nullable, SalemoveError * _Nullable))completion;
/// End an Engagement
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     completion: A callback that will return the ending result or <code>SalemoveError</code>
///   </li>
/// </ul>
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
/// </ul>
- (void)endEngagementWithCompletion:(void (^ _Nonnull)(BOOL, SalemoveError * _Nullable))completion;
@end



@interface Salemove (SWIFT_EXTENSION(SalemoveSDK))
/// Cancels all active queue tickets that the current visitor has.
/// Use this method to avoid attempting to enter a queue while the visitor is already enqueued. If you call <code>queueForEngagement</code>
/// with <code>shouldCloseAllQueues</code> set to <code>true</code>, this method is called for you before attempting to enqueue into a new queue.
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ContextError.invalidURL</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
///   <li>
///     <code>QueueError.queueClosed</code>
///   </li>
///   <li>
///     <code>QueueError.queueFull</code>
///   </li>
///   <li>
///     <code>QueueError.invalidId</code>
///   </li>
/// </ul>
/// \param completion A callback that will return <code>true</code> if successful, or <code>false</code> and a <code>SalemoveError</code> if it fails.
///
- (void)dequeueFromActiveTicketsWithCompletion:(void (^ _Nonnull)(BOOL, SalemoveError * _Nullable))completion;
/// Cancel the Engagement queueing with specific ticket
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
/// </ul>
/// \param queueTicket The <code>QueueTicket</code> that was used to enqueue
///
/// \param completion A callback that will return the dequeuing result or <code>SalemoveError</code>
///
- (void)cancelWithQueueTicket:(QueueTicket * _Nonnull)queueTicket completion:(void (^ _Nonnull)(BOOL, SalemoveError * _Nullable))completion;
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
/// </ul>
/// \param completion A callback that will return the <code>Queue</code> list or <code>SalemoveError</code>
///
- (void)listQueuesWithCompletion:(void (^ _Nonnull)(NSArray<Queue *> * _Nullable, SalemoveError * _Nullable))completion;
/// <hr/>
/// Example:
/// \code
/// let queueUpdatesCallbackId = Salemove.sharedInstance.subscribeForUpdates(
///     forQueue: [QUEUE_ID_1, QUEUE_ID_2],
///     onError: showError(salemoveError:),
///     onUpdate: updateQueueInfo(newQueue:)
/// )
///
/// \endcode\param for Array of strings represinting Queue IDs that you want to get updates for
///
/// \param onUpdate A callback that returns a new instance of <code>Queue</code> every time its info is changed
///
/// \param onError A callback that returns <code>SalemoveError</code> which could have one of the reasons:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
///   <li>
///     <code>QueueError.invalidId</code>
///   </li>
/// </ul>
///
///
/// returns:
///
/// A unique callback ID or <code>nil</code> if callback was not registered due to error.
/// This callback ID could be used to usubscribe from Queue updates.
- (NSString * _Nullable)subscribeForUpdatesForQueue:(NSArray<NSString *> * _Nonnull)queueIds onError:(void (^ _Nonnull)(SalemoveError * _Nonnull))onError onUpdate:(void (^ _Nonnull)(Queue * _Nonnull))onUpdate SWIFT_WARN_UNUSED_RESULT;
/// Unsubscribes from Queue updates.
/// \param queueCallbackId ID of callback for which you would like to stop receiving updates.
///
/// \param onError A callback that returns <code>SalemoveError</code> which could have one of the reasons:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
/// </ul>
///
- (void)unsubscribeFromUpdatesWithQueueCallbackId:(NSString * _Nonnull)queueCallbackId onError:(void (^ _Nonnull)(SalemoveError * _Nonnull))onError;
@end

@class VisitorContext;

@interface Salemove (SWIFT_EXTENSION(SalemoveSDK))
/// Deprecated. Use <code>fetchFile(engagementFile:progress:completion:)</code> instead.
- (void)fetchFile:(NSString * _Nonnull)id progress:(void (^ _Nullable)(EngagementFileProgress * _Nonnull))progress completion:(void (^ _Nonnull)(EngagementFileData * _Nullable, SalemoveError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use fetchFile(engagementFile:progress:completion:) instead.");
/// Deprecated. Use <code>send(selectedOptionValue:completion:)</code> instead.
- (void)sendWithSelectedOptionValue:(NSString * _Nonnull)selectedOptionValue messageId:(NSString * _Nonnull)messageId completion:(void (^ _Nonnull)(Message * _Nullable, SalemoveError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use send(selectedOptionValue:completion:) instead.");
/// Deprecated. Use <code>Salemove.configure(with:)</code> instead.
- (BOOL)configureWithAppToken:(NSString * _Nonnull)appToken error:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_MSG("Use `Salemove.configure(with:) throws` instead.");
/// Change the site used by the client library.
/// \param site The siteID that should be selected.
///
///
/// throws:
/// <code>ConfigurationError.invalidSite</code>
- (BOOL)configureWithSite:(NSString * _Nonnull)site error:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_MSG("Use `Salemove.configure(_ configuration: Configuration)` instead.");
/// Change the environment used by the client library.
/// \param environment The environment baseURL that should be selected.
///
///
/// throws:
/// <code>ConfigurationError.invalidEnvironment</code>
- (BOOL)configureWithEnvironment:(NSString * _Nonnull)environment error:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_MSG("Use `Salemove.configure(_ configuration: Configuration)` instead.");
/// Deprecated.
- (BOOL)configureWithApiToken:(NSString * _Nonnull)apiToken error:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_MSG("Api token is not supported.");
/// Deprecated.
- (void)queueForEngagementWithQueueID:(NSString * _Nonnull)queueID visitorContext:(VisitorContext * _Nonnull)visitorContext shouldCloseAllQueues:(BOOL)shouldCloseAllQueues completion:(void (^ _Nonnull)(QueueTicket * _Nullable, SalemoveError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use queueForEngagement(queueID:visitorContext:shouldCloseAllQueues:completion:) with Optional<VisitorContext> instead.");
/// Deprecated.
- (void)requestEngagementWithSelectedOperator:(Operator * _Nonnull)selectedOperator visitorContext:(VisitorContext * _Nonnull)visitorContext completion:(void (^ _Nonnull)(EngagementRequest * _Nullable, SalemoveError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use requestEngagementWith(selectedOperator:visitorContext:completion:) with Optional<VisitorContext> instead.");
@end



/// The basic gateway class that interacts with the client library through the app delegate
SWIFT_CLASS("_TtC11SalemoveSDK19SalemoveAppDelegate")
@interface SalemoveAppDelegate : NSObject <UIApplicationDelegate>
/// Identify the app launch and initialize the sdk internals.
/// \param application The current application.
///
/// \param launchOptions The options with which the application has been launched.
///
/// \param enablePushNotifications Set it to <code>true</code> if you want to enable push notifications. Otherwise, set it to <code>false</code>.
/// The default value is <code>false</code>.
///
///
/// returns:
/// <code>true</code> if the application can be started with the specified launch options. Otherwise, it returns <code>false</code>.
- (BOOL)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions;
/// Handle the application active state and setup the internals.
/// \param application The current application.
///
- (void)applicationDidBecomeActive:(UIApplication * _Nonnull)application;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Wrapped error object
SWIFT_CLASS("_TtC11SalemoveSDK13SalemoveError")
@interface SalemoveError : NSObject
/// Human readable string that explains what went wrong
@property (nonatomic, readonly, copy) NSString * _Nonnull reason;
/// Underlying error object
@property (nonatomic, readonly) NSError * _Nullable error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// List of available screen sharing statuses
typedef SWIFT_ENUM(NSInteger, ScreenSharingStatus, open) {
/// There is an ongoing screen sharing session
  ScreenSharingStatusSharing = 0,
/// No ongoing screensharing session
  ScreenSharingStatusNotSharing = 1,
};


/// Option for single choice messages.
SWIFT_CLASS("_TtC11SalemoveSDK18SingleChoiceOption")
@interface SingleChoiceOption : NSObject
/// Text displayed to the user as a choice label.
@property (nonatomic, copy) NSString * _Nullable text;
/// Value of the choice sent as a response on user interaction.
@property (nonatomic, copy) NSString * _Nullable value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum VideoScalingOptions : NSInteger;
@class NSCoder;

/// View that displays video stream. This can be added as a subview or insereted into a UIStackView for resizing.
SWIFT_CLASS("_TtC11SalemoveSDK10StreamView")
@interface StreamView : UIView
/// This modifies the internal constrains to change the view bounds.
/// One of the <code>VideoScalingOptions</code>
@property (nonatomic) enum VideoScalingOptions scale;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end

@protocol RTCVideoRenderer;

@interface StreamView (SWIFT_EXTENSION(SalemoveSDK)) <RTCVideoViewDelegate>
/// :nodoc:
- (void)videoView:(id <RTCVideoRenderer> _Nonnull)videoView didChangeVideoSize:(CGSize)size;
@end












/// Video scaling options, can be used to specify desired resize options
typedef SWIFT_ENUM(NSInteger, VideoScalingOptions, open) {
/// Scales the video to the screen bounds by changing the aspect ratio if needed.
  VideoScalingOptionsFill = 0,
/// Scales the video to fit the bounds by maintaining the aspect ratio. Any remaining area is transparent.
  VideoScalingOptionsAspectFit = 1,
/// Scales the video to fill the screen bounds. Some portion of the content maybe be clipped.
  VideoScalingOptionsAspectFill = 2,
};


/// Visitor context specifies a content that can be shown to an Operator during an Engagement
/// on the place of CoBrowsing section in Operator App
SWIFT_CLASS("_TtC11SalemoveSDK14VisitorContext")
@interface VisitorContext : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





SWIFT_CLASS("_TtC11SalemoveSDK25VisitorScreenSharingState")
@interface VisitorScreenSharingState : NSObject
/// ScreenSharing status, which is one of <code>ScreenSharingStatus</code>
@property (nonatomic, readonly) enum ScreenSharingStatus status;
/// <code>LocalScreen</code> can be used to stop screen sharing.
@property (nonatomic, readonly, strong) LocalScreen * _Nullable localScreen;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef SALEMOVESDK_SWIFT_H
#define SALEMOVESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import UserNotifications;
@import WebRTC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SalemoveSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Attachment included in a <code>Message</code>.
SWIFT_CLASS("_TtC11SalemoveSDK10Attachment")
@interface Attachment : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The type of the attachment.
typedef SWIFT_ENUM(NSInteger, AttachmentType, open) {
/// Attachment has files.
  AttachmentTypeFiles = 0,
/// Attachment has a single choice questionnaire.
  AttachmentTypeSingleChoice = 1,
/// Attachment has the response to a single choice questionnaire.
  AttachmentTypeSingleChoiceResponse = 2,
};


/// Audio stream, that can be used to control operator and visitor audio during an engagement
SWIFT_PROTOCOL("_TtP11SalemoveSDK15AudioStreamable_")
@protocol AudioStreamable
/// Play the incoming/outgoing audio stream
- (void)playAudio SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="Audio is now played automatically when media is established");
/// Mute the outgoing audio stream
- (void)mute;
/// Unmute the outgoing audio stream
- (void)unmute;
/// State of the audio stream
///
/// returns:
/// bool indicating if the stream is muted or not
@property (nonatomic, readonly) BOOL isMuted;
/// Source of the audio stream
///
/// returns:
/// bool indicating if the stream is local or remote
@property (nonatomic, readonly) BOOL isRemote;
/// Handler used to detect if Visitor stream is put on hold or resumed from being put on hold by Operator
@property (nonatomic, copy) void (^ _Nullable onHold)(BOOL);
@end


/// Error of the configuration of the sdk
typedef SWIFT_ENUM(NSInteger, ConfigurationError, open) {
/// The site ID is invalid.
  ConfigurationErrorInvalidSite = 0,
/// The environemnt is invalid.
  ConfigurationErrorInvalidEnvironment = 1,
/// The app token is invalid.
  ConfigurationErrorInvalidAppToken = 2,
/// The api token is invalid.
  ConfigurationErrorInvalidApiToken = 3,
/// The api token is not supported.
  ConfigurationErrorApiTokenNotSupported = 4,
/// The site Api key is invalid.
  ConfigurationErrorInvalidSiteApiKey = 5,
/// The region custom endpoint is invalid.
  ConfigurationErrorInvalidRegionEndpoint = 6,
};
static NSString * _Nonnull const ConfigurationErrorDomain = @"SalemoveSDK.ConfigurationError";

/// Deprecated.
typedef SWIFT_ENUM(NSInteger, ContextError, open) {
/// The context URL is invalid.
  ContextErrorInvalidURL = 0,
};
static NSString * _Nonnull const ContextErrorDomain = @"SalemoveSDK.ContextError";


@class NSString;
@class Operator;

/// Representation of an engagement in Glia.
SWIFT_CLASS("_TtC11SalemoveSDK10Engagement")
@interface Engagement : NSObject
/// The ID of the engagement.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The operator that is currently engaged with the visitor.
@property (nonatomic, readonly, strong) Operator * _Nullable engagedOperator;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Error of the Engagement
typedef SWIFT_ENUM(NSInteger, EngagementError, open) {
/// The Operator is unavailable for an Engagement.
  EngagementErrorOperatorUnavailable = 0,
/// Engagement request timeout.
  EngagementErrorTimeout = 1,
/// Engagement request rejected by the Operator.
  EngagementErrorRejected = 2,
/// Engagment request cancelled by the Visitor.
  EngagementErrorVisitorCanceled = 3,
/// Engagmenet request cancelled by Operator.
  EngagementErrorOperatorCanceled = 4,
/// Engagmenet request aborted by Operator leaving.
  EngagementErrorOperatorLeft = 5,
};
static NSString * _Nonnull const EngagementErrorDomain = @"SalemoveSDK.EngagementError";

@class NSURL;

/// A file that is part of an engagement.
SWIFT_CLASS("_TtC11SalemoveSDK14EngagementFile")
@interface EngagementFile : NSObject
/// ID of the file. Used only when receiving a message.
@property (nonatomic, readonly, copy) NSString * _Nullable id;
/// File mimetype, for example <code>application/pdf</code>. Used only when receiving a message.
@property (nonatomic, readonly, copy) NSString * _Nullable contentType;
/// Name of the file.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The URL of the file. When downloading, it is the endpoint to be used to retrieve the file,
/// and is nil if <code>isDeleted</code> is true. When uploading, it is the URL of the file in the device.
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
/// Creates an object with information for uploading a file to Glia’s servers.
/// \param name The HTTP body parameter to which the file should be assigned. This value is <code>"content"</code> by default.
///
/// \param url The file’s URL in the device’s internal memory.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name url:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
/// Creates an object with information for uploading a file to Glia’s servers.
/// \param id The ID of a file.
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSData;

/// The information about files shared or uploaded during an engagement.
SWIFT_CLASS("_TtC11SalemoveSDK18EngagementFileData")
@interface EngagementFileData : NSObject
/// The data of the file.
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The information of a file uploaded during an engagement.
SWIFT_CLASS("_TtC11SalemoveSDK25EngagementFileInformation")
@interface EngagementFileInformation : NSObject
@end


/// The progress of a file upload during the engagement.
SWIFT_CLASS("_TtC11SalemoveSDK22EngagementFileProgress")
@interface EngagementFileProgress : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Engagement request sent to an Operator
SWIFT_CLASS("_TtC11SalemoveSDK17EngagementRequest")
@interface EngagementRequest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SalemoveError;

/// Basic protocol for selecting an Operator
SWIFT_PROTOCOL("_TtP11SalemoveSDK13ErrorHandling_")
@protocol ErrorHandling
/// Called when there is a failure in the client library or in the Engagement flow
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code> - in the case when there is an internal error
///   </li>
///   <li>
///     <code>EngagementError.timeout</code> - in the case when an Engagement request was not accepted in time by the Operator
///   </li>
///   <li>
///     <code>EngagementError.rejected</code> - in the case when an Engagement request was rejected by the Operator
///   </li>
///   <li>
///     <code>EngagementError.visitorCanceled</code> - in the case when the Visitor cancels an Engagement request
///   </li>
///   <li>
///     <code>EngagementError.operatorCanceled</code> - in the case when Operator cancels an Engagement request
///   </li>
///   <li>
///     <code>EngagementError.operatorLeft</code> - in the case when Operator leaves an active Engagement
///   </li>
/// </ul>
/// \param error the <code>SalemoveError</code>
///
- (void)failWithError:(SalemoveError * _Nonnull)error;
@end

/// Error related to files.
typedef SWIFT_ENUM(NSInteger, FileError, open) {
/// A file uploaded to Glia’s servers has been identified as infected by our security check.
  FileErrorInfected = 0,
/// The file type is unsupported by Glia.
  FileErrorUnsupportedFileType = 1,
/// The file is too big to be uploaded.
  FileErrorFileTooBig = 2,
/// The provided file URL is invalid.
  FileErrorInvalidFileURL = 3,
/// The file is unavailable. For example, the file might have been deleted.
  FileErrorFileUnavailable = 4,
/// File uploading disabled. For example, the file uploading might have been disabled from the operator side.
  FileErrorForbidden = 5,
};
static NSString * _Nonnull const FileErrorDomain = @"SalemoveSDK.FileError";

/// General error of the client library
typedef SWIFT_ENUM(NSInteger, GeneralError, open) {
/// Internal error
  GeneralErrorInternalError = 0,
/// Networking error
  GeneralErrorNetworkError = 1,
};
static NSString * _Nonnull const GeneralErrorDomain = @"SalemoveSDK.GeneralError";

@class StreamView;

/// LocalScreen provides an ability to stop a screen shared by a Visitor during an Engagement.
SWIFT_CLASS("_TtC11SalemoveSDK11LocalScreen")
@interface LocalScreen : NSObject
/// Stop sharing Visitor screen with Operator
- (void)stopSharing;
/// Access the stream view
///
/// returns:
/// ‘StreamView’ that contains the the screen stream
- (StreamView * _Nonnull)getStreamView SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Available log levels. This can be configured by <code>Salemove.sharedIsntance.configureLogLevel(level: LogLevel)</code>
typedef SWIFT_ENUM(NSInteger, LogLevel, open) {
/// The SDK will not produce any logs
  LogLevelNone = 0,
/// Prints: error
  LogLevelError = 1,
/// Prints: warning, error
  LogLevelWarning = 2,
/// Prints: info, warning, error
  LogLevelInfo = 3,
/// Prints all the logs
  LogLevelDebug = 4,
};

/// Error of the media
typedef SWIFT_ENUM(NSInteger, MediaError, open) {
/// When the user has explicitly denied the permission to work with the media
  MediaErrorPermissionDenied = 0,
/// When there is an active screensharing session but does not allow screensharing to start
  MediaErrorScreenSharingNotAvailable = 1,
/// When the Visitor is using an older iOS version that 11.0
  MediaErrorNotAvailableOnIOSVersion = 2,
/// The SDK does not support the specified engagement type.
  MediaErrorUnsupportedEngagementType = 3,
};
static NSString * _Nonnull const MediaErrorDomain = @"SalemoveSDK.MediaError";

/// Error of the media upgrade request
typedef SWIFT_ENUM(NSInteger, MediaUpgradeError, open) {
/// Upgrade to requested media failed.
  MediaUpgradeErrorRequestError = 0,
/// Received unexpected arguments or unexpected response from server.
  MediaUpgradeErrorUnsupportedRequest = 1,
};
static NSString * _Nonnull const MediaUpgradeErrorDomain = @"SalemoveSDK.MediaUpgradeError";


/// MediaUpgradeOffer object sent by the client library
SWIFT_CLASS("_TtC11SalemoveSDK17MediaUpgradeOffer")
@interface MediaUpgradeOffer : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Chat message sent by an Operator or a Visitor
SWIFT_CLASS("_TtC11SalemoveSDK7Message")
@interface Message : NSObject
/// Identifier of the message. This identifier can be used to track a single message.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Content of the message
@property (nonatomic, readonly, copy) NSString * _Nonnull content;
/// Attachment
@property (nonatomic, readonly, strong) Attachment * _Nullable attachment;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class OperatorTypingStatus;

/// Basic protocol for handling chat incoming messages
SWIFT_PROTOCOL("_TtP11SalemoveSDK15MessageHandling_")
@protocol MessageHandling
/// Receiving a message from an Operator, or a Visitor in the case the message was successfully delivered
/// after sending it using <code>Salemove.send(message:)</code>.
/// \param message Instance of <code>Message</code>
///
- (void)receiveWithMessage:(Message * _Nonnull)message;
/// Receiving an <code>OperatorTypingStatusUpdate</code> when the Operator starts or stops writing a chat message
@property (nonatomic, readonly, copy) void (^ _Nonnull onOperatorTypingStatusUpdate)(OperatorTypingStatus * _Nonnull);
/// Handling the incoming messages updates that happens when
/// the client library fetches new information on ‘UIApplicationDidBecomeActive’
@property (nonatomic, readonly, copy) void (^ _Nonnull onMessagesUpdated)(NSArray<Message *> * _Nonnull);
@end


@class OperatorPicture;

/// An Operator for an Engagement
SWIFT_CLASS("_TtC11SalemoveSDK8Operator")
@interface Operator : NSObject
/// Operator name.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Operator picture, see OperatorPicture class for more details.
@property (nonatomic, readonly, strong) OperatorPicture * _Nullable picture;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// <ul>
///   <li>
///     Operator picture information
///   </li>
/// </ul>
SWIFT_CLASS("_TtC11SalemoveSDK15OperatorPicture")
@interface OperatorPicture : NSObject
/// <ul>
///   <li>
///     Returns The Operator picture URL if exists
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSString * _Nullable url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Operator typing status
SWIFT_CLASS("_TtC11SalemoveSDK20OperatorTypingStatus")
@interface OperatorTypingStatus : NSObject
/// True if the Operator has written or is writing a message but has not sent it yet, false otherwise.
@property (nonatomic, readonly) BOOL isTyping;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum PushType : NSInteger;

/// Push object sent by the client library
SWIFT_CLASS("_TtC11SalemoveSDK4Push")
@interface Push : NSObject
/// UNNotificationResponse.actionIdentifier that is returned by the system
@property (nonatomic, readonly, copy) NSString * _Nonnull actionIdentifier;
/// Push type. One of <code>PushType</code> values.
@property (nonatomic, readonly) enum PushType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11SalemoveSDK17PushNotifications")
@interface PushNotifications : NSObject
/// The current handler that the SDK is forwarding the UNNotificationResponse.actionIdentifier to.
@property (nonatomic, copy) void (^ _Nullable handler)(Push * _Nonnull);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





@class UIApplication;
@class UNUserNotificationCenter;
@class UNNotification;
@class UNNotificationResponse;

@interface PushNotifications (SWIFT_EXTENSION(SalemoveSDK)) <UNUserNotificationCenterDelegate>
/// See <a href="x-source-tag://PushNotificationsHandlingDidRegister">PushNotificationsHandling</a> for more information.
- (void)application:(UIApplication * _Nonnull)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
/// See <a href="x-source-tag://PushNotificationsHandlingDidFailToRegister">PushNotificationsHandling</a> for more information.
- (void)application:(UIApplication * _Nonnull)application didFailToRegisterForRemoteNotificationsWithError:(NSError * _Nonnull)error;
/// See <a href="x-source-tag://PushNotificationsHandlingWillPresent">PushNotificationsHandling</a> for more information.
- (void)userNotificationCenter:(UNUserNotificationCenter * _Nonnull)center willPresentNotification:(UNNotification * _Nonnull)notification withCompletionHandler:(void (^ _Nonnull)(UNNotificationPresentationOptions))completionHandler;
/// See <a href="x-source-tag://PushNotificationsHandlingDidReceive">PushNotificationsHandling</a> for more information.
- (void)userNotificationCenter:(UNUserNotificationCenter * _Nonnull)center didReceiveNotificationResponse:(UNNotificationResponse * _Nonnull)response withCompletionHandler:(void (^ _Nonnull)(void))completionHandler;
@end

/// Available push notification types
typedef SWIFT_ENUM(NSInteger, PushType, open) {
/// Unknown type
  PushTypeUnidentified = 0,
/// Chat type
  PushTypeChatMessage = 1,
};

@class QueueState;

/// A queue for an Engagement
SWIFT_CLASS("_TtC11SalemoveSDK5Queue")
@interface Queue : NSObject
/// Queue identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Queue name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Queue state
@property (nonatomic, readonly, strong) QueueState * _Nonnull state;
/// Indicates that queue is the default. true if Queue is default
@property (nonatomic, readonly) BOOL isDefault;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Error of the Queue
typedef SWIFT_ENUM(NSInteger, QueueError, open) {
/// The Queue is closed for an Engagement.
  QueueErrorQueueClosed = 0,
/// The Queue is full.
  QueueErrorQueueFull = 1,
/// The Queue ID is invalid.
  QueueErrorInvalidId = 2,
/// The visitor is already enqueued.
  QueueErrorAlreadyEnqueued = 3,
};
static NSString * _Nonnull const QueueErrorDomain = @"SalemoveSDK.QueueError";


SWIFT_CLASS("_TtC11SalemoveSDK10QueueState")
@interface QueueState : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A token for Visitor’s spot in the queue. This ticket can also be used to cancel queueing
SWIFT_CLASS("_TtC11SalemoveSDK11QueueTicket")
@interface QueueTicket : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Shared instance that can be accessed across all the application
SWIFT_CLASS("_TtC11SalemoveSDK8Salemove")
@interface Salemove : NSObject
/// Use this to access the client library, avoid creating the instance manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Salemove * _Nonnull sharedInstance;)
+ (Salemove * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// The current selected environment
@property (nonatomic, readonly, copy) NSString * _Nonnull environment;
/// The current selected site
@property (nonatomic, readonly, copy) NSString * _Nonnull site;
/// The current provided app token
@property (nonatomic, readonly, copy) NSString * _Nonnull appToken;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end










@interface Salemove (SWIFT_EXTENSION(SalemoveSDK))
/// Request media upgrade with specific offer
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
///   <li>
///     <code>MediaUpgradeError.requestError</code>
///   </li>
/// </ul>
/// \param offer The `MediaUpgradeOffer’ that is used for the request
///
/// \param completion A callback that returns the upgrade result or <code>SalemoveError</code>
///
- (void)requestMediaUpgradeWithOffer:(MediaUpgradeOffer * _Nonnull)offer completion:(void (^ _Nonnull)(BOOL, SalemoveError * _Nullable))completion;
@end


@interface Salemove (SWIFT_EXTENSION(SalemoveSDK))
/// Request a VisitorCode for current Visitor
/// A Visitor code can be displayed to the Visitor. The Visitor can then inform OmniBrowse Operators of their code.
/// OmniBrowse Operators use the Visitor’s code to start an OmniBrowse Engagement with the Visitor.
/// Each Visitor code is generated on demand and is unique for every Visitor on a particular site. Upon the first time
/// this function is called for a Visitor the code is generated and returned. For each successive call thereafter the
/// same code will be returned as long as the code has not expired. The expiration time for Visitor codes is 3 hours.
/// During that time the code can be used to initiate an engagement. Once Operator uses the Visitor code to initiate
/// an engagement, the code will expire immediately. When the Visitor Code expires this function will return a new
/// Visitor code.
/// The expiration time is important to take note of if you plan on retrieving the code only once during the Visitor’s
/// session. A new code should be requested once the initial one has expired. When Visitor provides an expired code
/// to Operator the Operator will not be able to connect with the Visitor.
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
/// </ul>
/// \param completion A callback that will return the visitor code or <code>SalemoveError</code>
///
- (void)requestVisitorCodeWithCompletion:(void (^ _Nonnull)(NSString * _Nullable, SalemoveError * _Nullable))completion;
@end






@interface Salemove (SWIFT_EXTENSION(SalemoveSDK))
/// Clear the use session of the client library
- (void)clearSession;
@end


@interface Salemove (SWIFT_EXTENSION(SalemoveSDK))
/// Configure log level
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     level: One of the ‘LogLevel’ values that the logger should use
///   </li>
/// </ul>
- (void)configureLogLevelWithLevel:(enum LogLevel)level;
@end


@interface Salemove (SWIFT_EXTENSION(SalemoveSDK))
/// Uploads a file to an engagement. The uploaded file can be later sent as part of a chat message attachments.
/// If Glia’s servers require a security check for the uploaded file, then it will be triggered automatically. The completion
/// will be called with the file information once the check succeeds and reports that the file is clean. If the security
/// check fails, then the completion will be called with <code>FileError.infected</code>. In case the security scan is not
/// needed, the completion will be called right after the file upload is completed.
/// The error inside the completion may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
///   <li>
///     <code>FileError.infected</code>
///   </li>
///   <li>
///     <code>FileError.unsupportedFileType</code>
///   </li>
///   <li>
///     <code>FileError.fileTooBig</code>
///   </li>
/// </ul>
/// \param file The file that will be uploaded.
///
/// \param progress A callback that reports the upload progress of the file.
///
/// \param completion A callback that will return <code>EngagementFileInformation</code> at the end of successful upload and security scan (if needed), or <code>SalemoveError</code>.
///
- (void)uploadFileToEngagement:(EngagementFile * _Nonnull)file progress:(void (^ _Nullable)(EngagementFileProgress * _Nonnull))progress completion:(void (^ _Nonnull)(EngagementFileInformation * _Nullable, SalemoveError * _Nullable))completion;
/// Retrieves a file from Glia’s servers.
/// The error inside the completion may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
/// </ul>
/// \param engagementFile A instance of EngagementFile.
///
/// \param progress A callback that reports the upload progress of the file.
///
/// \param completion A callback that will return an <code>EngagementFileData</code> object if successful, or <code>InternalError</code>.
///
- (void)fetchFileWithEngagementFile:(EngagementFile * _Nonnull)engagementFile progress:(void (^ _Nullable)(EngagementFileProgress * _Nonnull))progress completion:(void (^ _Nonnull)(EngagementFileData * _Nullable, SalemoveError * _Nullable))completion;
@end





@interface Salemove (SWIFT_EXTENSION(SalemoveSDK))
/// Send a chat message.
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
/// </ul>
/// \param message The content of the message that should be sent to the operator.
///
/// \param attachment An optional attachment to be sent to the operator. It is <code>nil</code> by default.
///
/// \param completion A callback that will return the <code>Message</code> or <code>SalemoveError</code>.
///
- (void)sendWithMessage:(NSString * _Nonnull)message attachment:(Attachment * _Nullable)attachment completion:(void (^ _Nonnull)(Message * _Nullable, SalemoveError * _Nullable))completion;
/// Send a chat message.
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
/// </ul>
/// \param message A content of the message that should be queued.
///
/// \param queueID The ID of the queue to which the message is sent.
///
/// \param completion A callback that will return the <code>Message</code> or <code>SalemoveError</code>.
///
- (void)sendWithMessage:(NSString * _Nonnull)message queueID:(NSString * _Nonnull)queueID completion:(void (^ _Nonnull)(Message * _Nullable, SalemoveError * _Nullable))completion;
/// Send a message preview to the Operator.
/// The latest preview message will always be visible to the Operator. This means that Operators can use the
/// preview messages as an indication of Visitor activity. The Operator could also use the preview messages to
/// start preparing a response before the Visitor finishes typing, ensuring a fast and seamless communication
/// experience.
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
/// </ul>
/// \param message The content of the message preview.
///
/// \param completion A callback that will return the sending result or <code>SalemoveError</code>.
///
- (void)sendMessagePreviewWithMessage:(NSString * _Nonnull)message completion:(void (^ _Nonnull)(BOOL, SalemoveError * _Nullable))completion;
@end



@interface Salemove (SWIFT_EXTENSION(SalemoveSDK))
/// Waits until there is an active engagement handled by the SDK.
/// If the SDK already has an active engagement present, then it returns information about it through
/// the <code>completion</code> block. Otherwise, it waits until the SDK receives information about an active engagement.
/// This method is useful to decide if touching on a push notification after the app has been force closed should open
/// an engagement screen. If there is an engagement restored by the SDK, then this method will notify soon after the
/// SDK is initialized, and you can show an engagement screen. Otherwise, then you should do nothing about the push
/// notification.
/// \param completion The closure that will be called once the SDK detects an active engagement.
///
- (void)waitForActiveEngagementWithCompletion:(void (^ _Nonnull)(Engagement * _Nullable, SalemoveError * _Nullable))completion;
/// Cancel an ongoing EngagementRequest
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     engagementRequest: The ongoing EngagementRequest to be canceled
///   </li>
///   <li>
///     completion: A callback that will return the canceling result or <code>SalemoveError</code>
///   </li>
/// </ul>
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
/// </ul>
- (void)cancelWithEngagementRequest:(EngagementRequest * _Nonnull)engagementRequest completion:(void (^ _Nonnull)(BOOL, SalemoveError * _Nullable))completion;
/// Requests information of the Operator(s) that are currently engaged with the Visitor
/// <ul>
///   <li>
///     parameter:
///   </li>
///   <li>
///     completion: A callback that will return a list of all ‘Operator’s in engagement  or <code>SalemoveError</code>
///   </li>
/// </ul>
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
/// </ul>
- (void)requestEngagedOperatorWithCompletion:(void (^ _Nonnull)(NSArray<Operator *> * _Nullable, SalemoveError * _Nullable))completion;
/// End an Engagement
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     completion: A callback that will return the ending result or <code>SalemoveError</code>
///   </li>
/// </ul>
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
/// </ul>
- (void)endEngagementWithCompletion:(void (^ _Nonnull)(BOOL, SalemoveError * _Nullable))completion;
@end



@interface Salemove (SWIFT_EXTENSION(SalemoveSDK))
/// Cancels all active queue tickets that the current visitor has.
/// Use this method to avoid attempting to enter a queue while the visitor is already enqueued. If you call <code>queueForEngagement</code>
/// with <code>shouldCloseAllQueues</code> set to <code>true</code>, this method is called for you before attempting to enqueue into a new queue.
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ContextError.invalidURL</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
///   <li>
///     <code>QueueError.queueClosed</code>
///   </li>
///   <li>
///     <code>QueueError.queueFull</code>
///   </li>
///   <li>
///     <code>QueueError.invalidId</code>
///   </li>
/// </ul>
/// \param completion A callback that will return <code>true</code> if successful, or <code>false</code> and a <code>SalemoveError</code> if it fails.
///
- (void)dequeueFromActiveTicketsWithCompletion:(void (^ _Nonnull)(BOOL, SalemoveError * _Nullable))completion;
/// Cancel the Engagement queueing with specific ticket
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
/// </ul>
/// \param queueTicket The <code>QueueTicket</code> that was used to enqueue
///
/// \param completion A callback that will return the dequeuing result or <code>SalemoveError</code>
///
- (void)cancelWithQueueTicket:(QueueTicket * _Nonnull)queueTicket completion:(void (^ _Nonnull)(BOOL, SalemoveError * _Nullable))completion;
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
/// </ul>
/// \param completion A callback that will return the <code>Queue</code> list or <code>SalemoveError</code>
///
- (void)listQueuesWithCompletion:(void (^ _Nonnull)(NSArray<Queue *> * _Nullable, SalemoveError * _Nullable))completion;
/// <hr/>
/// Example:
/// \code
/// let queueUpdatesCallbackId = Salemove.sharedInstance.subscribeForUpdates(
///     forQueue: [QUEUE_ID_1, QUEUE_ID_2],
///     onError: showError(salemoveError:),
///     onUpdate: updateQueueInfo(newQueue:)
/// )
///
/// \endcode\param for Array of strings represinting Queue IDs that you want to get updates for
///
/// \param onUpdate A callback that returns a new instance of <code>Queue</code> every time its info is changed
///
/// \param onError A callback that returns <code>SalemoveError</code> which could have one of the reasons:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
///   <li>
///     <code>QueueError.invalidId</code>
///   </li>
/// </ul>
///
///
/// returns:
///
/// A unique callback ID or <code>nil</code> if callback was not registered due to error.
/// This callback ID could be used to usubscribe from Queue updates.
- (NSString * _Nullable)subscribeForUpdatesForQueue:(NSArray<NSString *> * _Nonnull)queueIds onError:(void (^ _Nonnull)(SalemoveError * _Nonnull))onError onUpdate:(void (^ _Nonnull)(Queue * _Nonnull))onUpdate SWIFT_WARN_UNUSED_RESULT;
/// Unsubscribes from Queue updates.
/// \param queueCallbackId ID of callback for which you would like to stop receiving updates.
///
/// \param onError A callback that returns <code>SalemoveError</code> which could have one of the reasons:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidAppToken</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidApiToken</code>
///   </li>
/// </ul>
///
- (void)unsubscribeFromUpdatesWithQueueCallbackId:(NSString * _Nonnull)queueCallbackId onError:(void (^ _Nonnull)(SalemoveError * _Nonnull))onError;
@end

@class VisitorContext;

@interface Salemove (SWIFT_EXTENSION(SalemoveSDK))
/// Deprecated. Use <code>fetchFile(engagementFile:progress:completion:)</code> instead.
- (void)fetchFile:(NSString * _Nonnull)id progress:(void (^ _Nullable)(EngagementFileProgress * _Nonnull))progress completion:(void (^ _Nonnull)(EngagementFileData * _Nullable, SalemoveError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use fetchFile(engagementFile:progress:completion:) instead.");
/// Deprecated. Use <code>send(selectedOptionValue:completion:)</code> instead.
- (void)sendWithSelectedOptionValue:(NSString * _Nonnull)selectedOptionValue messageId:(NSString * _Nonnull)messageId completion:(void (^ _Nonnull)(Message * _Nullable, SalemoveError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use send(selectedOptionValue:completion:) instead.");
/// Deprecated. Use <code>Salemove.configure(with:)</code> instead.
- (BOOL)configureWithAppToken:(NSString * _Nonnull)appToken error:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_MSG("Use `Salemove.configure(with:) throws` instead.");
/// Change the site used by the client library.
/// \param site The siteID that should be selected.
///
///
/// throws:
/// <code>ConfigurationError.invalidSite</code>
- (BOOL)configureWithSite:(NSString * _Nonnull)site error:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_MSG("Use `Salemove.configure(_ configuration: Configuration)` instead.");
/// Change the environment used by the client library.
/// \param environment The environment baseURL that should be selected.
///
///
/// throws:
/// <code>ConfigurationError.invalidEnvironment</code>
- (BOOL)configureWithEnvironment:(NSString * _Nonnull)environment error:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_MSG("Use `Salemove.configure(_ configuration: Configuration)` instead.");
/// Deprecated.
- (BOOL)configureWithApiToken:(NSString * _Nonnull)apiToken error:(NSError * _Nullable * _Nullable)error SWIFT_DEPRECATED_MSG("Api token is not supported.");
/// Deprecated.
- (void)queueForEngagementWithQueueID:(NSString * _Nonnull)queueID visitorContext:(VisitorContext * _Nonnull)visitorContext shouldCloseAllQueues:(BOOL)shouldCloseAllQueues completion:(void (^ _Nonnull)(QueueTicket * _Nullable, SalemoveError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use queueForEngagement(queueID:visitorContext:shouldCloseAllQueues:completion:) with Optional<VisitorContext> instead.");
/// Deprecated.
- (void)requestEngagementWithSelectedOperator:(Operator * _Nonnull)selectedOperator visitorContext:(VisitorContext * _Nonnull)visitorContext completion:(void (^ _Nonnull)(EngagementRequest * _Nullable, SalemoveError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use requestEngagementWith(selectedOperator:visitorContext:completion:) with Optional<VisitorContext> instead.");
@end



/// The basic gateway class that interacts with the client library through the app delegate
SWIFT_CLASS("_TtC11SalemoveSDK19SalemoveAppDelegate")
@interface SalemoveAppDelegate : NSObject <UIApplicationDelegate>
/// Identify the app launch and initialize the sdk internals.
/// \param application The current application.
///
/// \param launchOptions The options with which the application has been launched.
///
/// \param enablePushNotifications Set it to <code>true</code> if you want to enable push notifications. Otherwise, set it to <code>false</code>.
/// The default value is <code>false</code>.
///
///
/// returns:
/// <code>true</code> if the application can be started with the specified launch options. Otherwise, it returns <code>false</code>.
- (BOOL)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions;
/// Handle the application active state and setup the internals.
/// \param application The current application.
///
- (void)applicationDidBecomeActive:(UIApplication * _Nonnull)application;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Wrapped error object
SWIFT_CLASS("_TtC11SalemoveSDK13SalemoveError")
@interface SalemoveError : NSObject
/// Human readable string that explains what went wrong
@property (nonatomic, readonly, copy) NSString * _Nonnull reason;
/// Underlying error object
@property (nonatomic, readonly) NSError * _Nullable error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// List of available screen sharing statuses
typedef SWIFT_ENUM(NSInteger, ScreenSharingStatus, open) {
/// There is an ongoing screen sharing session
  ScreenSharingStatusSharing = 0,
/// No ongoing screensharing session
  ScreenSharingStatusNotSharing = 1,
};


/// Option for single choice messages.
SWIFT_CLASS("_TtC11SalemoveSDK18SingleChoiceOption")
@interface SingleChoiceOption : NSObject
/// Text displayed to the user as a choice label.
@property (nonatomic, copy) NSString * _Nullable text;
/// Value of the choice sent as a response on user interaction.
@property (nonatomic, copy) NSString * _Nullable value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum VideoScalingOptions : NSInteger;
@class NSCoder;

/// View that displays video stream. This can be added as a subview or insereted into a UIStackView for resizing.
SWIFT_CLASS("_TtC11SalemoveSDK10StreamView")
@interface StreamView : UIView
/// This modifies the internal constrains to change the view bounds.
/// One of the <code>VideoScalingOptions</code>
@property (nonatomic) enum VideoScalingOptions scale;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end

@protocol RTCVideoRenderer;

@interface StreamView (SWIFT_EXTENSION(SalemoveSDK)) <RTCVideoViewDelegate>
/// :nodoc:
- (void)videoView:(id <RTCVideoRenderer> _Nonnull)videoView didChangeVideoSize:(CGSize)size;
@end












/// Video scaling options, can be used to specify desired resize options
typedef SWIFT_ENUM(NSInteger, VideoScalingOptions, open) {
/// Scales the video to the screen bounds by changing the aspect ratio if needed.
  VideoScalingOptionsFill = 0,
/// Scales the video to fit the bounds by maintaining the aspect ratio. Any remaining area is transparent.
  VideoScalingOptionsAspectFit = 1,
/// Scales the video to fill the screen bounds. Some portion of the content maybe be clipped.
  VideoScalingOptionsAspectFill = 2,
};


/// Visitor context specifies a content that can be shown to an Operator during an Engagement
/// on the place of CoBrowsing section in Operator App
SWIFT_CLASS("_TtC11SalemoveSDK14VisitorContext")
@interface VisitorContext : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





SWIFT_CLASS("_TtC11SalemoveSDK25VisitorScreenSharingState")
@interface VisitorScreenSharingState : NSObject
/// ScreenSharing status, which is one of <code>ScreenSharingStatus</code>
@property (nonatomic, readonly) enum ScreenSharingStatus status;
/// <code>LocalScreen</code> can be used to stop screen sharing.
@property (nonatomic, readonly, strong) LocalScreen * _Nullable localScreen;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
