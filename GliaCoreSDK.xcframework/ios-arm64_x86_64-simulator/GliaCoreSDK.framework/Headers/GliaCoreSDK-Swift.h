#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
#ifndef GLIACORESDK_SWIFT_H
#define GLIACORESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import UserNotifications;
@import WebRTC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="GliaCoreSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

/// Attachment included in a <code>Message</code>.
SWIFT_CLASS("_TtC11GliaCoreSDK10Attachment")
@interface Attachment : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The type of the attachment.
typedef SWIFT_ENUM(NSInteger, AttachmentType, open) {
/// Attachment has files.
  AttachmentTypeFiles = 0,
/// Attachment has a single choice questionnaire.
  AttachmentTypeSingleChoice = 1,
/// Attachment has the response to a single choice questionnaire.
  AttachmentTypeSingleChoiceResponse = 2,
/// Attachment is of SSML type.
  AttachmentTypeSsml = 3,
};


/// Audio stream, that can be used to control operator and visitor audio during an engagement
SWIFT_PROTOCOL("_TtP11GliaCoreSDK15AudioStreamable_")
@protocol AudioStreamable
/// Play the incoming/outgoing audio stream
- (void)playAudio SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="Audio is now played automatically when media is established");
/// Mute the outgoing audio stream
- (void)mute;
/// Unmute the outgoing audio stream
- (void)unmute;
/// State of the audio stream. Indicating if the stream is muted or not
@property (nonatomic, readonly) BOOL isMuted;
/// Source of the audio stream. Indicating if the stream is local or remote
@property (nonatomic, readonly) BOOL isRemote;
/// Handler used to detect if Visitor stream is put on hold or resumed from being put on hold by Operator
@property (nonatomic, copy) void (^ _Nullable onHold)(BOOL);
@end

/// Error of the configuration of the sdk
typedef SWIFT_ENUM(NSInteger, ConfigurationError, open) {
/// The site ID is invalid.
  ConfigurationErrorInvalidSite = 0,
/// The environemnt is invalid.
  ConfigurationErrorInvalidEnvironment = 1,
/// The site Api key is invalid.
  ConfigurationErrorInvalidSiteApiKey = 2,
/// The region custom endpoint is invalid.
  ConfigurationErrorInvalidRegionEndpoint = 3,
/// The region custom endpoint is invalid.
  ConfigurationErrorInvalidConfiguration = 4,
};
static NSString * _Nonnull const ConfigurationErrorDomain = @"GliaCoreSDK.ConfigurationError";



@class NSString;
@class Operator;

/// Representation of an engagement in Glia.
SWIFT_CLASS("_TtC11GliaCoreSDK10Engagement")
@interface Engagement : NSObject
/// The ID of the engagement.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The operator that is currently engaged with the visitor.
@property (nonatomic, readonly, strong) Operator * _Nullable engagedOperator;
/// The engagement identifier from which this has been
/// restarted.
@property (nonatomic, copy) NSString * _Nullable restartedFromEngagementId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface Engagement (SWIFT_EXTENSION(GliaCoreSDK))
/// Calculates if engagement is transferred Secure Conversation.
/// \param engagement. 
///
///
/// returns:
/// Boolean value indicating whether it’s transferred Secure Conversation.
+ (BOOL)isTransferredSecureConversation:(Engagement * _Nonnull)engagement SWIFT_WARN_UNUSED_RESULT;
@end






/// Error of the Engagement
typedef SWIFT_ENUM(NSInteger, EngagementError, open) {
/// The Operator is unavailable for an Engagement.
  EngagementErrorOperatorUnavailable = 0,
/// Engagement request timeout.
  EngagementErrorTimeout = 1,
/// Engagement request rejected by the Operator.
  EngagementErrorRejected = 2,
/// Engagment request cancelled by the Visitor.
  EngagementErrorVisitorCanceled = 3,
/// Engagmenet request cancelled by Operator.
  EngagementErrorOperatorCanceled = 4,
/// Engagmenet request aborted by Operator leaving.
  EngagementErrorOperatorLeft = 5,
};
static NSString * _Nonnull const EngagementErrorDomain = @"GliaCoreSDK.EngagementError";

@class NSURL;

/// A file that is part of an engagement.
SWIFT_CLASS("_TtC11GliaCoreSDK14EngagementFile")
@interface EngagementFile : NSObject
/// ID of the file. Used only when receiving a message.
@property (nonatomic, readonly, copy) NSString * _Nullable id;
/// File mimetype, for example <code>application/pdf</code>. Used only when receiving a message.
@property (nonatomic, readonly, copy) NSString * _Nullable contentType;
/// Name of the file.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The URL of the file. When downloading, it is the endpoint to be used to retrieve the file,
/// and is nil if <code>isDeleted</code> is true. When uploading, it is the URL of the file in the device.
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
/// Creates an object with information for uploading a file to Glia’s servers.
/// \param name The HTTP body parameter to which the file should be assigned. This value is <code>"content"</code> by default.
///
/// \param url The file’s URL in the device’s internal memory.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name url:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
/// Creates an object with information for uploading a file to Glia’s servers.
/// \param id The ID of a file.
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSData;

/// The information about files shared or uploaded during an engagement.
SWIFT_CLASS("_TtC11GliaCoreSDK18EngagementFileData")
@interface EngagementFileData : NSObject
/// The data of the file.
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The information of a file uploaded during an engagement.
SWIFT_CLASS("_TtC11GliaCoreSDK25EngagementFileInformation")
@interface EngagementFileInformation : NSObject
@end


/// The progress of a file upload during the engagement.
SWIFT_CLASS("_TtC11GliaCoreSDK22EngagementFileProgress")
@interface EngagementFileProgress : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Engagement request sent to an Operator
SWIFT_CLASS("_TtC11GliaCoreSDK17EngagementRequest")
@interface EngagementRequest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class GliaCoreError;

/// Basic protocol for selecting an Operator
SWIFT_PROTOCOL("_TtP11GliaCoreSDK13ErrorHandling_")
@protocol ErrorHandling
/// Called when there is a failure in the client library or in the Engagement flow
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     error: the <code>GliaCoreError</code>
///   </li>
/// </ul>
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code> - in the case when there is an internal error
///   </li>
///   <li>
///     <code>EngagementError.timeout</code> - in the case when an Engagement request was not accepted in time by the Operator
///   </li>
///   <li>
///     <code>EngagementError.rejected</code> - in the case when an Engagement request was rejected by the Operator
///   </li>
///   <li>
///     <code>EngagementError.visitorCanceled</code> - in the case when the Visitor cancels an Engagement request
///   </li>
///   <li>
///     <code>EngagementError.operatorCanceled</code> - in the case when Operator cancels an Engagement request
///   </li>
///   <li>
///     <code>EngagementError.operatorLeft</code> - in the case when Operator leaves an active Engagement
///   </li>
/// </ul>
- (void)failWithError:(GliaCoreError * _Nonnull)error;
@end

/// Error related to files.
typedef SWIFT_ENUM(NSInteger, FileError, open) {
/// A file uploaded to Glia’s servers has been identified as infected by our security check.
  FileErrorInfected = 0,
/// The file type is unsupported by Glia.
  FileErrorUnsupportedFileType = 1,
/// The file is too big to be uploaded.
  FileErrorFileTooBig = 2,
/// The provided file URL is invalid.
  FileErrorInvalidFileURL = 3,
/// The file is unavailable. For example, the file might have been deleted.
  FileErrorFileUnavailable = 4,
/// File uploading disabled. For example, the file uploading might have been disabled from the operator side.
  FileErrorForbidden = 5,
};
static NSString * _Nonnull const FileErrorDomain = @"GliaCoreSDK.FileError";

/// General error of the client library
typedef SWIFT_ENUM(NSInteger, GeneralError, open) {
/// Internal error
  GeneralErrorInternalError = 0,
/// Networking error
  GeneralErrorNetworkError = 1,
};
static NSString * _Nonnull const GeneralErrorDomain = @"GliaCoreSDK.GeneralError";


/// Shared instance that can be accessed across all the application
SWIFT_CLASS("_TtC11GliaCoreSDK8GliaCore")
@interface GliaCore : NSObject
/// Use this to access the client library, avoid creating the instance manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GliaCore * _Nonnull sharedInstance;)
+ (GliaCore * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// The current selected environment
@property (nonatomic, readonly, copy) NSString * _Nonnull environment;
/// The current selected site
@property (nonatomic, readonly, copy) NSString * _Nonnull site;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end











@class Queue;

@interface GliaCore (SWIFT_EXTENSION(GliaCoreSDK))
/// Deprecated.
- (NSString * _Nullable)subscribeForUpdatesForQueue:(NSArray<NSString *> * _Nonnull)queueIds onError:(void (^ _Nonnull)(GliaCoreError * _Nonnull))onError onUpdate:(void (^ _Nonnull)(Queue * _Nonnull))onUpdate SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use the `subscribeForQueuesUpdates` method that provides a `Result` in its completion.");
@end



@interface GliaCore (SWIFT_EXTENSION(GliaCoreSDK))
/// Deprecated.
- (void)cancelWithEngagementRequest:(EngagementRequest * _Nonnull)engagementRequest completion:(void (^ _Nonnull)(BOOL, GliaCoreError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use cancel(queueTicket:completion:) instead.");
@end







enum LogLevel : NSInteger;

@interface GliaCore (SWIFT_EXTENSION(GliaCoreSDK))
/// Configure log level
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     level: One of the ‘LogLevel’ values that the logger should use
///   </li>
/// </ul>
- (void)configureLogLevelWithLevel:(enum LogLevel)level;
@end


@class MediaUpgradeOffer;

@interface GliaCore (SWIFT_EXTENSION(GliaCoreSDK))
/// Request media upgrade with specific offer
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>MediaUpgradeError.requestError</code>
///   </li>
/// </ul>
/// \param offer The `MediaUpgradeOffer’ that is used for the request
///
/// \param completion A callback that returns the upgrade result or <code>GliaCoreError</code>
///
- (void)requestMediaUpgradeWithOffer:(MediaUpgradeOffer * _Nonnull)offer completion:(void (^ _Nonnull)(BOOL, GliaCoreError * _Nullable))completion;
@end








@interface GliaCore (SWIFT_EXTENSION(GliaCoreSDK))
/// Send a message preview to the Operator.
/// The latest preview message will always be visible to the Operator. This means that Operators can use the
/// preview messages as an indication of Visitor activity. The Operator could also use the preview messages to
/// start preparing a response before the Visitor finishes typing, ensuring a fast and seamless communication
/// experience.
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
/// </ul>
/// \param message The content of the message preview.
///
/// \param completion A callback that will return the sending result or <code>GliaCoreError</code>.
///
- (void)sendMessagePreviewWithMessage:(NSString * _Nonnull)message completion:(void (^ _Nonnull)(BOOL, GliaCoreError * _Nullable))completion;
@end




@interface GliaCore (SWIFT_EXTENSION(GliaCoreSDK))
/// Clear the use session of the client library
- (void)clearSession;
@end


@interface GliaCore (SWIFT_EXTENSION(GliaCoreSDK))
/// Uploads a file to an engagement. The uploaded file can be later sent as part of a chat message attachments.
/// If Glia’s servers require a security check for the uploaded file, then it will be triggered automatically. The completion
/// will be called with the file information once the check succeeds and reports that the file is clean. If the security
/// check fails, then the completion will be called with <code>FileError.infected</code>. In case the security scan is not
/// needed, the completion will be called right after the file upload is completed.
/// The error inside the completion may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>FileError.infected</code>
///   </li>
///   <li>
///     <code>FileError.unsupportedFileType</code>
///   </li>
///   <li>
///     <code>FileError.fileTooBig</code>
///   </li>
/// </ul>
/// \param file The file that will be uploaded.
///
/// \param progress A callback that reports the upload progress of the file.
///
/// \param completion A callback that will return <code>EngagementFileInformation</code> at the end of successful upload and security scan (if needed), or <code>GliaCoreError</code>.
///
- (void)uploadFileToEngagement:(EngagementFile * _Nonnull)file progress:(void (^ _Nullable)(EngagementFileProgress * _Nonnull))progress completion:(void (^ _Nonnull)(EngagementFileInformation * _Nullable, GliaCoreError * _Nullable))completion;
/// Retrieves a file from Glia’s servers.
/// The error inside the completion may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
/// </ul>
/// \param engagementFile A instance of EngagementFile.
///
/// \param progress A callback that reports the upload progress of the file.
///
/// \param completion A callback that will return an <code>EngagementFileData</code> object if successful, or <code>InternalError</code>.
///
- (void)fetchFileWithEngagementFile:(EngagementFile * _Nonnull)engagementFile progress:(void (^ _Nullable)(EngagementFileProgress * _Nonnull))progress completion:(void (^ _Nonnull)(EngagementFileData * _Nullable, GliaCoreError * _Nullable))completion;
@end




@class Message;

@interface GliaCore (SWIFT_EXTENSION(GliaCoreSDK))
/// Deprecated.
- (void)sendWithMessage:(NSString * _Nonnull)message queueID:(NSString * _Nonnull)queueID completion:(void (^ _Nonnull)(Message * _Nullable, GliaCoreError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use send(messagePayload:completion:)");
/// Deprecated.
- (void)sendWithMessage:(NSString * _Nonnull)message attachment:(Attachment * _Nullable)attachment completion:(void (^ _Nonnull)(Message * _Nullable, GliaCoreError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use send(messagePayload:completion:)");
@end



@interface GliaCore (SWIFT_EXTENSION(GliaCoreSDK))
/// Requests information of the Operator(s) that are currently engaged with the Visitor
/// <ul>
///   <li>
///     parameter:
///   </li>
///   <li>
///     completion: A callback that will return a list of all ‘Operator’s in engagement  or <code>GliaCoreError</code>
///   </li>
/// </ul>
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
/// </ul>
- (void)requestEngagedOperatorWithCompletion:(void (^ _Nonnull)(NSArray<Operator *> * _Nullable, GliaCoreError * _Nullable))completion;
/// End an Engagement
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     completion: A callback that will return the ending result or <code>GliaCoreError</code>
///   </li>
/// </ul>
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
/// </ul>
- (void)endEngagementWithCompletion:(void (^ _Nonnull)(BOOL, GliaCoreError * _Nullable))completion;
@end




@interface GliaCore (SWIFT_EXTENSION(GliaCoreSDK))
/// Unavailable.
- (BOOL)configureWithSite:(NSString * _Nonnull)site error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE_MSG("Use `GliaCore.configure(_ configuration: Configuration)` instead.");
/// Unavailable.
- (BOOL)configureWithEnvironment:(NSString * _Nonnull)environment error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE_MSG("Use `GliaCore.configure(_ configuration: Configuration)` instead.");
/// Unavailable.
- (void)requestVisitorCodeWithCompletion:(void (^ _Nonnull)(NSString * _Nullable, GliaCoreError * _Nullable))completion SWIFT_UNAVAILABLE_MSG("Use `GliaCore.CallVisualizer` to request visitor code.");
@end





@class QueueTicket;

@interface GliaCore (SWIFT_EXTENSION(GliaCoreSDK))
/// Cancel the Engagement queueing with specific ticket
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
/// </ul>
/// \param queueTicket The <code>QueueTicket</code> that was used to enqueue
///
/// \param completion A callback that will return the dequeuing result or <code>GliaCoreError</code>
///
- (void)cancelWithQueueTicket:(QueueTicket * _Nonnull)queueTicket completion:(void (^ _Nonnull)(BOOL, GliaCoreError * _Nullable))completion;
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
/// </ul>
/// \param completion A callback that will return the <code>Queue</code> list or <code>GliaCoreError</code>
///
- (void)listQueuesWithCompletion:(void (^ _Nonnull)(NSArray<Queue *> * _Nullable, GliaCoreError * _Nullable))completion;
/// Unsubscribes from Queue updates.
/// \param queueCallbackId ID of callback for which you would like to stop receiving updates.
///
/// \param onError A callback that returns <code>GliaCoreError</code> which could have one of the reasons:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
/// </ul>
///
- (void)unsubscribeFromUpdatesWithQueueCallbackId:(NSString * _Nonnull)queueCallbackId onError:(void (^ _Nonnull)(GliaCoreError * _Nonnull))onError;
@end

@class UIApplication;

/// The basic gateway class that interacts with the client library through the app delegate
SWIFT_CLASS("_TtC11GliaCoreSDK19GliaCoreAppDelegate")
@interface GliaCoreAppDelegate : NSObject <UIApplicationDelegate>
/// Identify the app launch and initialize the sdk internals.
/// \param application The current application.
///
/// \param launchOptions The options with which the application has been launched.
///
/// \param enablePushNotifications Set it to <code>true</code> if you want to enable push notifications. Otherwise, set it to <code>false</code>.
/// The default value is <code>false</code>.
///
///
/// returns:
/// <code>true</code> if the application can be started with the specified launch options. Otherwise, it returns <code>false</code>.
- (BOOL)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions;
/// Call this method when <code>application:didRegisterForRemoteNotificationsWithDeviceToken:</code> is called
/// from <code>UNUserNotificationCenterDelegate</code>.
/// Send all parameters that you receive in the delegate method as they are, without modifying them.
/// <h1>Reference</h1>
/// <a href="https://developer.apple.com/documentation/usernotifications/unusernotificationcenterdelegate">UNUserNotificationCenterDelegate</a>
/// \param application The current application.
///
/// \param deviceToken The data that holds the push notification device token.
///
- (void)application:(UIApplication * _Nonnull)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
/// Call this method if it was unable to register your app with APNs or if your app is not properly configured for remote notifications. During development, make sure your app has the proper entitlements and that its App ID is configured to support push notifications.
/// \param application The current application.
///
/// \param error The error appeared during the registration device with APNs.
///
- (void)application:(UIApplication * _Nonnull)application didFailToRegisterForRemoteNotificationsWithError:(NSError * _Nonnull)error;
/// Handle the application active state and setup the internals.
/// \param application The current application.
///
- (void)applicationDidBecomeActive:(UIApplication * _Nonnull)application;
- (void)applicationWillResignActive:(UIApplication * _Nonnull)application;
- (void)applicationDidEnterBackground:(UIApplication * _Nonnull)application;
- (void)applicationWillEnterForeground:(UIApplication * _Nonnull)application;
- (void)applicationWillTerminate:(UIApplication * _Nonnull)application;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Wrapped error object.
SWIFT_CLASS("_TtC11GliaCoreSDK13GliaCoreError")
@interface GliaCoreError : NSObject
/// Human readable string that explains what went wrong.
@property (nonatomic, readonly, copy) NSString * _Nonnull reason;
/// Underlying error object.
@property (nonatomic, readonly) NSError * _Nullable error;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class StreamView;

/// LocalScreen provides an ability to stop a screen shared by a Visitor during an Engagement.
SWIFT_CLASS("_TtC11GliaCoreSDK11LocalScreen")
@interface LocalScreen : NSObject
/// Stop sharing Visitor screen with Operator
- (void)stopSharing;
/// Access the stream view
///
/// returns:
/// ‘StreamView’ that contains the the screen stream
- (StreamView * _Nonnull)getStreamView SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Available log levels. This can be configured by <code>GliaCore.sharedInstance.configureLogLevel(level: LogLevel)</code>
typedef SWIFT_ENUM(NSInteger, LogLevel, open) {
/// The SDK will not produce any logs
  LogLevelNone = 0,
/// Prints: error
  LogLevelError = 1,
/// Prints: warning, error
  LogLevelWarning = 2,
  LogLevelInfo = 3,
/// Prints all the logs
  LogLevelDebug = 4,
};

/// Error of the media
typedef SWIFT_ENUM(NSInteger, MediaError, open) {
/// When the user has explicitly denied the permission to work with the media
  MediaErrorPermissionDenied = 0,
/// The SDK does not support the specified engagement type.
  MediaErrorUnsupportedEngagementType = 1,
};
static NSString * _Nonnull const MediaErrorDomain = @"GliaCoreSDK.MediaError";

/// Error of the media upgrade request
typedef SWIFT_ENUM(NSInteger, MediaUpgradeError, open) {
/// Upgrade to requested media failed.
  MediaUpgradeErrorRequestError = 0,
/// Received unexpected arguments or unexpected response from server.
  MediaUpgradeErrorUnsupportedRequest = 1,
};
static NSString * _Nonnull const MediaUpgradeErrorDomain = @"GliaCoreSDK.MediaUpgradeError";


/// MediaUpgradeOffer object sent by the client library
SWIFT_CLASS("_TtC11GliaCoreSDK17MediaUpgradeOffer")
@interface MediaUpgradeOffer : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Chat message sent by an Operator or a Visitor
SWIFT_CLASS("_TtC11GliaCoreSDK7Message")
@interface Message : NSObject
/// Identifier of the message. This identifier can be used to track a single message.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Content of the message
@property (nonatomic, readonly, copy) NSString * _Nonnull content;
/// Attachment
@property (nonatomic, readonly, strong) Attachment * _Nullable attachment;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class OperatorTypingStatus;

/// Basic protocol for handling chat incoming messages
SWIFT_PROTOCOL("_TtP11GliaCoreSDK15MessageHandling_")
@protocol MessageHandling
/// Receiving a message from an Operator, or a Visitor in the case the message was successfully delivered
/// after sending it using <code>GliaCore.send(message:)</code>.
/// \param message Instance of <code>Message</code>
///
- (void)receiveWithMessage:(Message * _Nonnull)message;
/// Receiving an <code>OperatorTypingStatusUpdate</code> when the Operator starts or stops writing a chat message
@property (nonatomic, readonly, copy) void (^ _Nonnull onOperatorTypingStatusUpdate)(OperatorTypingStatus * _Nonnull);
/// Handling the incoming messages updates that happens when
/// the client library fetches new information on ‘UIApplicationDidBecomeActive’
@property (nonatomic, readonly, copy) void (^ _Nonnull onMessagesUpdated)(NSArray<Message *> * _Nonnull);
@end





@class OperatorPicture;

/// An Operator for an Engagement
SWIFT_CLASS("_TtC11GliaCoreSDK8Operator")
@interface Operator : NSObject
/// Operator name.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Operator picture, see OperatorPicture class for more details.
@property (nonatomic, readonly, strong) OperatorPicture * _Nullable picture;
/// Overriding of isEqual is necessary in order to compare the operators in the Widget SDK.
/// Without it, operator with the same data fields is considered different.
/// This creates unnecessary behavior, such as generation of event,
/// where operator becomes engaged twice, which in turn is reflected in the Widgets UI.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Operator picture information
SWIFT_CLASS("_TtC11GliaCoreSDK15OperatorPicture")
@interface OperatorPicture : NSObject
/// Returns The Operator picture URL if exists
@property (nonatomic, readonly, copy) NSString * _Nullable url;
/// Overriding of isEqual is necessary in order to compare the operators in the Widget SDK.
/// Without it, operator with the same data fields is considered different.
/// This creates unnecessary behavior, such as generation of event,
/// where operator becomes engaged twice, which in turn is reflected in the Widgets UI.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Operator typing status.
SWIFT_CLASS("_TtC11GliaCoreSDK20OperatorTypingStatus")
@interface OperatorTypingStatus : NSObject
/// True if the Operator has written or is writing a message but has not sent it yet, false otherwise.
@property (nonatomic, readonly) BOOL isTyping;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11GliaCoreSDK17PushNotifications")
@interface PushNotifications : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end













@class UNUserNotificationCenter;
@class UNNotification;
@class UNNotificationResponse;

@interface PushNotifications (SWIFT_EXTENSION(GliaCoreSDK)) <UNUserNotificationCenterDelegate>
/// See <a href="x-source-tag://PushNotificationsHandlingDidRegister">PushNotificationsHandling</a> for more information.
- (void)application:(UIApplication * _Nonnull)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
/// See <a href="x-source-tag://PushNotificationsHandlingDidFailToRegister">PushNotificationsHandling</a> for more information.
- (void)application:(UIApplication * _Nonnull)application didFailToRegisterForRemoteNotificationsWithError:(NSError * _Nonnull)error;
/// See <a href="x-source-tag://PushNotificationsHandlingWillPresent">PushNotificationsHandling</a> for more information.
- (void)userNotificationCenter:(UNUserNotificationCenter * _Nonnull)center willPresentNotification:(UNNotification * _Nonnull)notification withCompletionHandler:(void (^ _Nonnull)(UNNotificationPresentationOptions))completionHandler;
/// See <a href="x-source-tag://PushNotificationsHandlingDidReceive">PushNotificationsHandling</a> for more information.
- (void)userNotificationCenter:(UNUserNotificationCenter * _Nonnull)center didReceiveNotificationResponse:(UNNotificationResponse * _Nonnull)response withCompletionHandler:(void (^ _Nonnull)(void))completionHandler;
@end

/// Push notifications can be triggered both when the visitor is on the app and
/// when the app is on the background. This enum allows you to identify the timing
/// of the handled push notification.
typedef SWIFT_ENUM(NSInteger, PushTiming, open) {
/// Push notification came while the visitor was inside the app.
  PushTimingInApp = 0,
/// Push notification came while the visitor had the app in the background.
  PushTimingBackground = 1,
/// Unknown timing.
  PushTimingUnidentified = 2,
};

@class QueueState;
@class NSDate;

/// A queue for an Engagement
SWIFT_CLASS("_TtC11GliaCoreSDK5Queue")
@interface Queue : NSObject
/// Queue identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Queue name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Queue state
@property (nonatomic, readonly, strong) QueueState * _Nonnull state;
/// Indicates that queue is the default. <code>true</code> if Queue is default
@property (nonatomic, readonly) BOOL isDefault;
/// Queue dispatch time
@property (nonatomic, readonly, copy) NSDate * _Nonnull lastUpdated;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Error of the Queue
typedef SWIFT_ENUM(NSInteger, QueueError, open) {
/// The Queue is closed for an Engagement.
  QueueErrorQueueClosed = 0,
/// The Queue is full.
  QueueErrorQueueFull = 1,
/// The Queue ID is invalid.
  QueueErrorInvalidId = 2,
/// The visitor is already enqueued.
  QueueErrorAlreadyEnqueued = 3,
};
static NSString * _Nonnull const QueueErrorDomain = @"GliaCoreSDK.QueueError";


SWIFT_CLASS("_TtC11GliaCoreSDK10QueueState")
@interface QueueState : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A token for Visitor’s spot in the queue. This ticket can also be used to cancel queueing
SWIFT_CLASS("_TtC11GliaCoreSDK11QueueTicket")
@interface QueueTicket : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Option for single choice messages.
SWIFT_CLASS("_TtC11GliaCoreSDK18SingleChoiceOption")
@interface SingleChoiceOption : NSObject
/// Text displayed to the user as a choice label.
@property (nonatomic, copy) NSString * _Nullable text;
/// Value of the choice sent as a response on user interaction.
@property (nonatomic, copy) NSString * _Nullable value;
/// Initializes SingleChoiceOption instance
/// \param text Text displayed to the user as a choice label.
///
/// \param value Value of the choice sent as a response on user interaction.
///
- (nonnull instancetype)initWithText:(NSString * _Nullable)text value:(NSString * _Nullable)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum VideoScalingOptions : NSInteger;
@class NSCoder;

/// View that displays video stream. This can be added as a subview or insereted into a UIStackView for resizing.
SWIFT_CLASS("_TtC11GliaCoreSDK10StreamView")
@interface StreamView : UIView
/// This modifies the internal constrains to change the view bounds.
/// One of the <code>VideoScalingOptions</code>
@property (nonatomic) enum VideoScalingOptions scale;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


@protocol RTCVideoRenderer;

@interface StreamView (SWIFT_EXTENSION(GliaCoreSDK)) <RTCVideoViewDelegate>
/// :nodoc:
- (void)videoView:(id <RTCVideoRenderer> _Nonnull)videoView didChangeVideoSize:(CGSize)size;
@end















/// Video scaling options, can be used to specify desired resize options
typedef SWIFT_ENUM(NSInteger, VideoScalingOptions, open) {
/// Scales the video to the screen bounds by changing the aspect ratio if needed.
  VideoScalingOptionsFill = 0,
/// Scales the video to fit the bounds by maintaining the aspect ratio. Any remaining area is transparent.
  VideoScalingOptionsAspectFit = 1,
/// Scales the video to fill the screen bounds. Some portion of the content maybe be clipped.
  VideoScalingOptionsAspectFill = 2,
};


/// Visitor context specifies a content that can be shown to an Operator during an Engagement
/// on the place of CoBrowsing section in Operator App
SWIFT_CLASS("_TtC11GliaCoreSDK14VisitorContext")
@interface VisitorContext : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
#ifndef GLIACORESDK_SWIFT_H
#define GLIACORESDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import UserNotifications;
@import WebRTC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="GliaCoreSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

/// Attachment included in a <code>Message</code>.
SWIFT_CLASS("_TtC11GliaCoreSDK10Attachment")
@interface Attachment : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The type of the attachment.
typedef SWIFT_ENUM(NSInteger, AttachmentType, open) {
/// Attachment has files.
  AttachmentTypeFiles = 0,
/// Attachment has a single choice questionnaire.
  AttachmentTypeSingleChoice = 1,
/// Attachment has the response to a single choice questionnaire.
  AttachmentTypeSingleChoiceResponse = 2,
/// Attachment is of SSML type.
  AttachmentTypeSsml = 3,
};


/// Audio stream, that can be used to control operator and visitor audio during an engagement
SWIFT_PROTOCOL("_TtP11GliaCoreSDK15AudioStreamable_")
@protocol AudioStreamable
/// Play the incoming/outgoing audio stream
- (void)playAudio SWIFT_AVAILABILITY(ios,obsoleted=10.0,message="Audio is now played automatically when media is established");
/// Mute the outgoing audio stream
- (void)mute;
/// Unmute the outgoing audio stream
- (void)unmute;
/// State of the audio stream. Indicating if the stream is muted or not
@property (nonatomic, readonly) BOOL isMuted;
/// Source of the audio stream. Indicating if the stream is local or remote
@property (nonatomic, readonly) BOOL isRemote;
/// Handler used to detect if Visitor stream is put on hold or resumed from being put on hold by Operator
@property (nonatomic, copy) void (^ _Nullable onHold)(BOOL);
@end

/// Error of the configuration of the sdk
typedef SWIFT_ENUM(NSInteger, ConfigurationError, open) {
/// The site ID is invalid.
  ConfigurationErrorInvalidSite = 0,
/// The environemnt is invalid.
  ConfigurationErrorInvalidEnvironment = 1,
/// The site Api key is invalid.
  ConfigurationErrorInvalidSiteApiKey = 2,
/// The region custom endpoint is invalid.
  ConfigurationErrorInvalidRegionEndpoint = 3,
/// The region custom endpoint is invalid.
  ConfigurationErrorInvalidConfiguration = 4,
};
static NSString * _Nonnull const ConfigurationErrorDomain = @"GliaCoreSDK.ConfigurationError";



@class NSString;
@class Operator;

/// Representation of an engagement in Glia.
SWIFT_CLASS("_TtC11GliaCoreSDK10Engagement")
@interface Engagement : NSObject
/// The ID of the engagement.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// The operator that is currently engaged with the visitor.
@property (nonatomic, readonly, strong) Operator * _Nullable engagedOperator;
/// The engagement identifier from which this has been
/// restarted.
@property (nonatomic, copy) NSString * _Nullable restartedFromEngagementId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface Engagement (SWIFT_EXTENSION(GliaCoreSDK))
/// Calculates if engagement is transferred Secure Conversation.
/// \param engagement. 
///
///
/// returns:
/// Boolean value indicating whether it’s transferred Secure Conversation.
+ (BOOL)isTransferredSecureConversation:(Engagement * _Nonnull)engagement SWIFT_WARN_UNUSED_RESULT;
@end






/// Error of the Engagement
typedef SWIFT_ENUM(NSInteger, EngagementError, open) {
/// The Operator is unavailable for an Engagement.
  EngagementErrorOperatorUnavailable = 0,
/// Engagement request timeout.
  EngagementErrorTimeout = 1,
/// Engagement request rejected by the Operator.
  EngagementErrorRejected = 2,
/// Engagment request cancelled by the Visitor.
  EngagementErrorVisitorCanceled = 3,
/// Engagmenet request cancelled by Operator.
  EngagementErrorOperatorCanceled = 4,
/// Engagmenet request aborted by Operator leaving.
  EngagementErrorOperatorLeft = 5,
};
static NSString * _Nonnull const EngagementErrorDomain = @"GliaCoreSDK.EngagementError";

@class NSURL;

/// A file that is part of an engagement.
SWIFT_CLASS("_TtC11GliaCoreSDK14EngagementFile")
@interface EngagementFile : NSObject
/// ID of the file. Used only when receiving a message.
@property (nonatomic, readonly, copy) NSString * _Nullable id;
/// File mimetype, for example <code>application/pdf</code>. Used only when receiving a message.
@property (nonatomic, readonly, copy) NSString * _Nullable contentType;
/// Name of the file.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The URL of the file. When downloading, it is the endpoint to be used to retrieve the file,
/// and is nil if <code>isDeleted</code> is true. When uploading, it is the URL of the file in the device.
@property (nonatomic, readonly, copy) NSURL * _Nullable url;
/// Creates an object with information for uploading a file to Glia’s servers.
/// \param name The HTTP body parameter to which the file should be assigned. This value is <code>"content"</code> by default.
///
/// \param url The file’s URL in the device’s internal memory.
///
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name url:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
/// Creates an object with information for uploading a file to Glia’s servers.
/// \param id The ID of a file.
///
- (nonnull instancetype)initWithId:(NSString * _Nonnull)id OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSData;

/// The information about files shared or uploaded during an engagement.
SWIFT_CLASS("_TtC11GliaCoreSDK18EngagementFileData")
@interface EngagementFileData : NSObject
/// The data of the file.
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The information of a file uploaded during an engagement.
SWIFT_CLASS("_TtC11GliaCoreSDK25EngagementFileInformation")
@interface EngagementFileInformation : NSObject
@end


/// The progress of a file upload during the engagement.
SWIFT_CLASS("_TtC11GliaCoreSDK22EngagementFileProgress")
@interface EngagementFileProgress : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Engagement request sent to an Operator
SWIFT_CLASS("_TtC11GliaCoreSDK17EngagementRequest")
@interface EngagementRequest : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class GliaCoreError;

/// Basic protocol for selecting an Operator
SWIFT_PROTOCOL("_TtP11GliaCoreSDK13ErrorHandling_")
@protocol ErrorHandling
/// Called when there is a failure in the client library or in the Engagement flow
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     error: the <code>GliaCoreError</code>
///   </li>
/// </ul>
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code> - in the case when there is an internal error
///   </li>
///   <li>
///     <code>EngagementError.timeout</code> - in the case when an Engagement request was not accepted in time by the Operator
///   </li>
///   <li>
///     <code>EngagementError.rejected</code> - in the case when an Engagement request was rejected by the Operator
///   </li>
///   <li>
///     <code>EngagementError.visitorCanceled</code> - in the case when the Visitor cancels an Engagement request
///   </li>
///   <li>
///     <code>EngagementError.operatorCanceled</code> - in the case when Operator cancels an Engagement request
///   </li>
///   <li>
///     <code>EngagementError.operatorLeft</code> - in the case when Operator leaves an active Engagement
///   </li>
/// </ul>
- (void)failWithError:(GliaCoreError * _Nonnull)error;
@end

/// Error related to files.
typedef SWIFT_ENUM(NSInteger, FileError, open) {
/// A file uploaded to Glia’s servers has been identified as infected by our security check.
  FileErrorInfected = 0,
/// The file type is unsupported by Glia.
  FileErrorUnsupportedFileType = 1,
/// The file is too big to be uploaded.
  FileErrorFileTooBig = 2,
/// The provided file URL is invalid.
  FileErrorInvalidFileURL = 3,
/// The file is unavailable. For example, the file might have been deleted.
  FileErrorFileUnavailable = 4,
/// File uploading disabled. For example, the file uploading might have been disabled from the operator side.
  FileErrorForbidden = 5,
};
static NSString * _Nonnull const FileErrorDomain = @"GliaCoreSDK.FileError";

/// General error of the client library
typedef SWIFT_ENUM(NSInteger, GeneralError, open) {
/// Internal error
  GeneralErrorInternalError = 0,
/// Networking error
  GeneralErrorNetworkError = 1,
};
static NSString * _Nonnull const GeneralErrorDomain = @"GliaCoreSDK.GeneralError";


/// Shared instance that can be accessed across all the application
SWIFT_CLASS("_TtC11GliaCoreSDK8GliaCore")
@interface GliaCore : NSObject
/// Use this to access the client library, avoid creating the instance manually
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) GliaCore * _Nonnull sharedInstance;)
+ (GliaCore * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
/// The current selected environment
@property (nonatomic, readonly, copy) NSString * _Nonnull environment;
/// The current selected site
@property (nonatomic, readonly, copy) NSString * _Nonnull site;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end











@class Queue;

@interface GliaCore (SWIFT_EXTENSION(GliaCoreSDK))
/// Deprecated.
- (NSString * _Nullable)subscribeForUpdatesForQueue:(NSArray<NSString *> * _Nonnull)queueIds onError:(void (^ _Nonnull)(GliaCoreError * _Nonnull))onError onUpdate:(void (^ _Nonnull)(Queue * _Nonnull))onUpdate SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Use the `subscribeForQueuesUpdates` method that provides a `Result` in its completion.");
@end



@interface GliaCore (SWIFT_EXTENSION(GliaCoreSDK))
/// Deprecated.
- (void)cancelWithEngagementRequest:(EngagementRequest * _Nonnull)engagementRequest completion:(void (^ _Nonnull)(BOOL, GliaCoreError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use cancel(queueTicket:completion:) instead.");
@end







enum LogLevel : NSInteger;

@interface GliaCore (SWIFT_EXTENSION(GliaCoreSDK))
/// Configure log level
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     level: One of the ‘LogLevel’ values that the logger should use
///   </li>
/// </ul>
- (void)configureLogLevelWithLevel:(enum LogLevel)level;
@end


@class MediaUpgradeOffer;

@interface GliaCore (SWIFT_EXTENSION(GliaCoreSDK))
/// Request media upgrade with specific offer
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>MediaUpgradeError.requestError</code>
///   </li>
/// </ul>
/// \param offer The `MediaUpgradeOffer’ that is used for the request
///
/// \param completion A callback that returns the upgrade result or <code>GliaCoreError</code>
///
- (void)requestMediaUpgradeWithOffer:(MediaUpgradeOffer * _Nonnull)offer completion:(void (^ _Nonnull)(BOOL, GliaCoreError * _Nullable))completion;
@end








@interface GliaCore (SWIFT_EXTENSION(GliaCoreSDK))
/// Send a message preview to the Operator.
/// The latest preview message will always be visible to the Operator. This means that Operators can use the
/// preview messages as an indication of Visitor activity. The Operator could also use the preview messages to
/// start preparing a response before the Visitor finishes typing, ensuring a fast and seamless communication
/// experience.
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
/// </ul>
/// \param message The content of the message preview.
///
/// \param completion A callback that will return the sending result or <code>GliaCoreError</code>.
///
- (void)sendMessagePreviewWithMessage:(NSString * _Nonnull)message completion:(void (^ _Nonnull)(BOOL, GliaCoreError * _Nullable))completion;
@end




@interface GliaCore (SWIFT_EXTENSION(GliaCoreSDK))
/// Clear the use session of the client library
- (void)clearSession;
@end


@interface GliaCore (SWIFT_EXTENSION(GliaCoreSDK))
/// Uploads a file to an engagement. The uploaded file can be later sent as part of a chat message attachments.
/// If Glia’s servers require a security check for the uploaded file, then it will be triggered automatically. The completion
/// will be called with the file information once the check succeeds and reports that the file is clean. If the security
/// check fails, then the completion will be called with <code>FileError.infected</code>. In case the security scan is not
/// needed, the completion will be called right after the file upload is completed.
/// The error inside the completion may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
///   <li>
///     <code>FileError.infected</code>
///   </li>
///   <li>
///     <code>FileError.unsupportedFileType</code>
///   </li>
///   <li>
///     <code>FileError.fileTooBig</code>
///   </li>
/// </ul>
/// \param file The file that will be uploaded.
///
/// \param progress A callback that reports the upload progress of the file.
///
/// \param completion A callback that will return <code>EngagementFileInformation</code> at the end of successful upload and security scan (if needed), or <code>GliaCoreError</code>.
///
- (void)uploadFileToEngagement:(EngagementFile * _Nonnull)file progress:(void (^ _Nullable)(EngagementFileProgress * _Nonnull))progress completion:(void (^ _Nonnull)(EngagementFileInformation * _Nullable, GliaCoreError * _Nullable))completion;
/// Retrieves a file from Glia’s servers.
/// The error inside the completion may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
/// </ul>
/// \param engagementFile A instance of EngagementFile.
///
/// \param progress A callback that reports the upload progress of the file.
///
/// \param completion A callback that will return an <code>EngagementFileData</code> object if successful, or <code>InternalError</code>.
///
- (void)fetchFileWithEngagementFile:(EngagementFile * _Nonnull)engagementFile progress:(void (^ _Nullable)(EngagementFileProgress * _Nonnull))progress completion:(void (^ _Nonnull)(EngagementFileData * _Nullable, GliaCoreError * _Nullable))completion;
@end




@class Message;

@interface GliaCore (SWIFT_EXTENSION(GliaCoreSDK))
/// Deprecated.
- (void)sendWithMessage:(NSString * _Nonnull)message queueID:(NSString * _Nonnull)queueID completion:(void (^ _Nonnull)(Message * _Nullable, GliaCoreError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use send(messagePayload:completion:)");
/// Deprecated.
- (void)sendWithMessage:(NSString * _Nonnull)message attachment:(Attachment * _Nullable)attachment completion:(void (^ _Nonnull)(Message * _Nullable, GliaCoreError * _Nullable))completion SWIFT_DEPRECATED_MSG("Use send(messagePayload:completion:)");
@end



@interface GliaCore (SWIFT_EXTENSION(GliaCoreSDK))
/// Requests information of the Operator(s) that are currently engaged with the Visitor
/// <ul>
///   <li>
///     parameter:
///   </li>
///   <li>
///     completion: A callback that will return a list of all ‘Operator’s in engagement  or <code>GliaCoreError</code>
///   </li>
/// </ul>
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
/// </ul>
- (void)requestEngagedOperatorWithCompletion:(void (^ _Nonnull)(NSArray<Operator *> * _Nullable, GliaCoreError * _Nullable))completion;
/// End an Engagement
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     completion: A callback that will return the ending result or <code>GliaCoreError</code>
///   </li>
/// </ul>
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
/// </ul>
- (void)endEngagementWithCompletion:(void (^ _Nonnull)(BOOL, GliaCoreError * _Nullable))completion;
@end




@interface GliaCore (SWIFT_EXTENSION(GliaCoreSDK))
/// Unavailable.
- (BOOL)configureWithSite:(NSString * _Nonnull)site error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE_MSG("Use `GliaCore.configure(_ configuration: Configuration)` instead.");
/// Unavailable.
- (BOOL)configureWithEnvironment:(NSString * _Nonnull)environment error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE_MSG("Use `GliaCore.configure(_ configuration: Configuration)` instead.");
/// Unavailable.
- (void)requestVisitorCodeWithCompletion:(void (^ _Nonnull)(NSString * _Nullable, GliaCoreError * _Nullable))completion SWIFT_UNAVAILABLE_MSG("Use `GliaCore.CallVisualizer` to request visitor code.");
@end





@class QueueTicket;

@interface GliaCore (SWIFT_EXTENSION(GliaCoreSDK))
/// Cancel the Engagement queueing with specific ticket
/// If the request is unsuccessful for any reason then the completion will have an Error.
/// The Error may have one of the following causes:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
/// </ul>
/// \param queueTicket The <code>QueueTicket</code> that was used to enqueue
///
/// \param completion A callback that will return the dequeuing result or <code>GliaCoreError</code>
///
- (void)cancelWithQueueTicket:(QueueTicket * _Nonnull)queueTicket completion:(void (^ _Nonnull)(BOOL, GliaCoreError * _Nullable))completion;
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>GeneralError.networkError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
/// </ul>
/// \param completion A callback that will return the <code>Queue</code> list or <code>GliaCoreError</code>
///
- (void)listQueuesWithCompletion:(void (^ _Nonnull)(NSArray<Queue *> * _Nullable, GliaCoreError * _Nullable))completion;
/// Unsubscribes from Queue updates.
/// \param queueCallbackId ID of callback for which you would like to stop receiving updates.
///
/// \param onError A callback that returns <code>GliaCoreError</code> which could have one of the reasons:
/// <ul>
///   <li>
///     <code>GeneralError.internalError</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidSite</code>
///   </li>
///   <li>
///     <code>ConfigurationError.invalidEnvironment</code>
///   </li>
/// </ul>
///
- (void)unsubscribeFromUpdatesWithQueueCallbackId:(NSString * _Nonnull)queueCallbackId onError:(void (^ _Nonnull)(GliaCoreError * _Nonnull))onError;
@end

@class UIApplication;

/// The basic gateway class that interacts with the client library through the app delegate
SWIFT_CLASS("_TtC11GliaCoreSDK19GliaCoreAppDelegate")
@interface GliaCoreAppDelegate : NSObject <UIApplicationDelegate>
/// Identify the app launch and initialize the sdk internals.
/// \param application The current application.
///
/// \param launchOptions The options with which the application has been launched.
///
/// \param enablePushNotifications Set it to <code>true</code> if you want to enable push notifications. Otherwise, set it to <code>false</code>.
/// The default value is <code>false</code>.
///
///
/// returns:
/// <code>true</code> if the application can be started with the specified launch options. Otherwise, it returns <code>false</code>.
- (BOOL)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions;
/// Call this method when <code>application:didRegisterForRemoteNotificationsWithDeviceToken:</code> is called
/// from <code>UNUserNotificationCenterDelegate</code>.
/// Send all parameters that you receive in the delegate method as they are, without modifying them.
/// <h1>Reference</h1>
/// <a href="https://developer.apple.com/documentation/usernotifications/unusernotificationcenterdelegate">UNUserNotificationCenterDelegate</a>
/// \param application The current application.
///
/// \param deviceToken The data that holds the push notification device token.
///
- (void)application:(UIApplication * _Nonnull)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
/// Call this method if it was unable to register your app with APNs or if your app is not properly configured for remote notifications. During development, make sure your app has the proper entitlements and that its App ID is configured to support push notifications.
/// \param application The current application.
///
/// \param error The error appeared during the registration device with APNs.
///
- (void)application:(UIApplication * _Nonnull)application didFailToRegisterForRemoteNotificationsWithError:(NSError * _Nonnull)error;
/// Handle the application active state and setup the internals.
/// \param application The current application.
///
- (void)applicationDidBecomeActive:(UIApplication * _Nonnull)application;
- (void)applicationWillResignActive:(UIApplication * _Nonnull)application;
- (void)applicationDidEnterBackground:(UIApplication * _Nonnull)application;
- (void)applicationWillEnterForeground:(UIApplication * _Nonnull)application;
- (void)applicationWillTerminate:(UIApplication * _Nonnull)application;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Wrapped error object.
SWIFT_CLASS("_TtC11GliaCoreSDK13GliaCoreError")
@interface GliaCoreError : NSObject
/// Human readable string that explains what went wrong.
@property (nonatomic, readonly, copy) NSString * _Nonnull reason;
/// Underlying error object.
@property (nonatomic, readonly) NSError * _Nullable error;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class StreamView;

/// LocalScreen provides an ability to stop a screen shared by a Visitor during an Engagement.
SWIFT_CLASS("_TtC11GliaCoreSDK11LocalScreen")
@interface LocalScreen : NSObject
/// Stop sharing Visitor screen with Operator
- (void)stopSharing;
/// Access the stream view
///
/// returns:
/// ‘StreamView’ that contains the the screen stream
- (StreamView * _Nonnull)getStreamView SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Available log levels. This can be configured by <code>GliaCore.sharedInstance.configureLogLevel(level: LogLevel)</code>
typedef SWIFT_ENUM(NSInteger, LogLevel, open) {
/// The SDK will not produce any logs
  LogLevelNone = 0,
/// Prints: error
  LogLevelError = 1,
/// Prints: warning, error
  LogLevelWarning = 2,
  LogLevelInfo = 3,
/// Prints all the logs
  LogLevelDebug = 4,
};

/// Error of the media
typedef SWIFT_ENUM(NSInteger, MediaError, open) {
/// When the user has explicitly denied the permission to work with the media
  MediaErrorPermissionDenied = 0,
/// The SDK does not support the specified engagement type.
  MediaErrorUnsupportedEngagementType = 1,
};
static NSString * _Nonnull const MediaErrorDomain = @"GliaCoreSDK.MediaError";

/// Error of the media upgrade request
typedef SWIFT_ENUM(NSInteger, MediaUpgradeError, open) {
/// Upgrade to requested media failed.
  MediaUpgradeErrorRequestError = 0,
/// Received unexpected arguments or unexpected response from server.
  MediaUpgradeErrorUnsupportedRequest = 1,
};
static NSString * _Nonnull const MediaUpgradeErrorDomain = @"GliaCoreSDK.MediaUpgradeError";


/// MediaUpgradeOffer object sent by the client library
SWIFT_CLASS("_TtC11GliaCoreSDK17MediaUpgradeOffer")
@interface MediaUpgradeOffer : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Chat message sent by an Operator or a Visitor
SWIFT_CLASS("_TtC11GliaCoreSDK7Message")
@interface Message : NSObject
/// Identifier of the message. This identifier can be used to track a single message.
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Content of the message
@property (nonatomic, readonly, copy) NSString * _Nonnull content;
/// Attachment
@property (nonatomic, readonly, strong) Attachment * _Nullable attachment;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class OperatorTypingStatus;

/// Basic protocol for handling chat incoming messages
SWIFT_PROTOCOL("_TtP11GliaCoreSDK15MessageHandling_")
@protocol MessageHandling
/// Receiving a message from an Operator, or a Visitor in the case the message was successfully delivered
/// after sending it using <code>GliaCore.send(message:)</code>.
/// \param message Instance of <code>Message</code>
///
- (void)receiveWithMessage:(Message * _Nonnull)message;
/// Receiving an <code>OperatorTypingStatusUpdate</code> when the Operator starts or stops writing a chat message
@property (nonatomic, readonly, copy) void (^ _Nonnull onOperatorTypingStatusUpdate)(OperatorTypingStatus * _Nonnull);
/// Handling the incoming messages updates that happens when
/// the client library fetches new information on ‘UIApplicationDidBecomeActive’
@property (nonatomic, readonly, copy) void (^ _Nonnull onMessagesUpdated)(NSArray<Message *> * _Nonnull);
@end





@class OperatorPicture;

/// An Operator for an Engagement
SWIFT_CLASS("_TtC11GliaCoreSDK8Operator")
@interface Operator : NSObject
/// Operator name.
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Operator picture, see OperatorPicture class for more details.
@property (nonatomic, readonly, strong) OperatorPicture * _Nullable picture;
/// Overriding of isEqual is necessary in order to compare the operators in the Widget SDK.
/// Without it, operator with the same data fields is considered different.
/// This creates unnecessary behavior, such as generation of event,
/// where operator becomes engaged twice, which in turn is reflected in the Widgets UI.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Operator picture information
SWIFT_CLASS("_TtC11GliaCoreSDK15OperatorPicture")
@interface OperatorPicture : NSObject
/// Returns The Operator picture URL if exists
@property (nonatomic, readonly, copy) NSString * _Nullable url;
/// Overriding of isEqual is necessary in order to compare the operators in the Widget SDK.
/// Without it, operator with the same data fields is considered different.
/// This creates unnecessary behavior, such as generation of event,
/// where operator becomes engaged twice, which in turn is reflected in the Widgets UI.
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Operator typing status.
SWIFT_CLASS("_TtC11GliaCoreSDK20OperatorTypingStatus")
@interface OperatorTypingStatus : NSObject
/// True if the Operator has written or is writing a message but has not sent it yet, false otherwise.
@property (nonatomic, readonly) BOOL isTyping;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11GliaCoreSDK17PushNotifications")
@interface PushNotifications : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end













@class UNUserNotificationCenter;
@class UNNotification;
@class UNNotificationResponse;

@interface PushNotifications (SWIFT_EXTENSION(GliaCoreSDK)) <UNUserNotificationCenterDelegate>
/// See <a href="x-source-tag://PushNotificationsHandlingDidRegister">PushNotificationsHandling</a> for more information.
- (void)application:(UIApplication * _Nonnull)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData * _Nonnull)deviceToken;
/// See <a href="x-source-tag://PushNotificationsHandlingDidFailToRegister">PushNotificationsHandling</a> for more information.
- (void)application:(UIApplication * _Nonnull)application didFailToRegisterForRemoteNotificationsWithError:(NSError * _Nonnull)error;
/// See <a href="x-source-tag://PushNotificationsHandlingWillPresent">PushNotificationsHandling</a> for more information.
- (void)userNotificationCenter:(UNUserNotificationCenter * _Nonnull)center willPresentNotification:(UNNotification * _Nonnull)notification withCompletionHandler:(void (^ _Nonnull)(UNNotificationPresentationOptions))completionHandler;
/// See <a href="x-source-tag://PushNotificationsHandlingDidReceive">PushNotificationsHandling</a> for more information.
- (void)userNotificationCenter:(UNUserNotificationCenter * _Nonnull)center didReceiveNotificationResponse:(UNNotificationResponse * _Nonnull)response withCompletionHandler:(void (^ _Nonnull)(void))completionHandler;
@end

/// Push notifications can be triggered both when the visitor is on the app and
/// when the app is on the background. This enum allows you to identify the timing
/// of the handled push notification.
typedef SWIFT_ENUM(NSInteger, PushTiming, open) {
/// Push notification came while the visitor was inside the app.
  PushTimingInApp = 0,
/// Push notification came while the visitor had the app in the background.
  PushTimingBackground = 1,
/// Unknown timing.
  PushTimingUnidentified = 2,
};

@class QueueState;
@class NSDate;

/// A queue for an Engagement
SWIFT_CLASS("_TtC11GliaCoreSDK5Queue")
@interface Queue : NSObject
/// Queue identifier
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
/// Queue name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Queue state
@property (nonatomic, readonly, strong) QueueState * _Nonnull state;
/// Indicates that queue is the default. <code>true</code> if Queue is default
@property (nonatomic, readonly) BOOL isDefault;
/// Queue dispatch time
@property (nonatomic, readonly, copy) NSDate * _Nonnull lastUpdated;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Error of the Queue
typedef SWIFT_ENUM(NSInteger, QueueError, open) {
/// The Queue is closed for an Engagement.
  QueueErrorQueueClosed = 0,
/// The Queue is full.
  QueueErrorQueueFull = 1,
/// The Queue ID is invalid.
  QueueErrorInvalidId = 2,
/// The visitor is already enqueued.
  QueueErrorAlreadyEnqueued = 3,
};
static NSString * _Nonnull const QueueErrorDomain = @"GliaCoreSDK.QueueError";


SWIFT_CLASS("_TtC11GliaCoreSDK10QueueState")
@interface QueueState : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A token for Visitor’s spot in the queue. This ticket can also be used to cancel queueing
SWIFT_CLASS("_TtC11GliaCoreSDK11QueueTicket")
@interface QueueTicket : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// Option for single choice messages.
SWIFT_CLASS("_TtC11GliaCoreSDK18SingleChoiceOption")
@interface SingleChoiceOption : NSObject
/// Text displayed to the user as a choice label.
@property (nonatomic, copy) NSString * _Nullable text;
/// Value of the choice sent as a response on user interaction.
@property (nonatomic, copy) NSString * _Nullable value;
/// Initializes SingleChoiceOption instance
/// \param text Text displayed to the user as a choice label.
///
/// \param value Value of the choice sent as a response on user interaction.
///
- (nonnull instancetype)initWithText:(NSString * _Nullable)text value:(NSString * _Nullable)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum VideoScalingOptions : NSInteger;
@class NSCoder;

/// View that displays video stream. This can be added as a subview or insereted into a UIStackView for resizing.
SWIFT_CLASS("_TtC11GliaCoreSDK10StreamView")
@interface StreamView : UIView
/// This modifies the internal constrains to change the view bounds.
/// One of the <code>VideoScalingOptions</code>
@property (nonatomic) enum VideoScalingOptions scale;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


@protocol RTCVideoRenderer;

@interface StreamView (SWIFT_EXTENSION(GliaCoreSDK)) <RTCVideoViewDelegate>
/// :nodoc:
- (void)videoView:(id <RTCVideoRenderer> _Nonnull)videoView didChangeVideoSize:(CGSize)size;
@end















/// Video scaling options, can be used to specify desired resize options
typedef SWIFT_ENUM(NSInteger, VideoScalingOptions, open) {
/// Scales the video to the screen bounds by changing the aspect ratio if needed.
  VideoScalingOptionsFill = 0,
/// Scales the video to fit the bounds by maintaining the aspect ratio. Any remaining area is transparent.
  VideoScalingOptionsAspectFit = 1,
/// Scales the video to fill the screen bounds. Some portion of the content maybe be clipped.
  VideoScalingOptionsAspectFill = 2,
};


/// Visitor context specifies a content that can be shown to an Operator during an Engagement
/// on the place of CoBrowsing section in Operator App
SWIFT_CLASS("_TtC11GliaCoreSDK14VisitorContext")
@interface VisitorContext : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
